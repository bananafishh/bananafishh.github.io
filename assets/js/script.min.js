function isEmail(e){return/^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(e)}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||ne;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function o(e){var t=!!e&&"length"in e&&e.length,n=he.type(e);return"function"!==n&&!he.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function r(e,t,n){return he.isFunction(t)?he.grep(e,function(e,o){return!!t.call(e,o,e)!==n}):t.nodeType?he.grep(e,function(e){return e===t!==n}):"string"!=typeof t?he.grep(e,function(e){return ae.call(t,e)>-1!==n}):we.test(t)?he.filter(t,e,n):(t=he.filter(t,e),he.grep(e,function(e){return ae.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return he.each(e.match(ke)||[],function(e,n){t[n]=!0}),t}function c(e){return e}function l(e){throw e}function u(e,t,n,o){var i;try{e&&he.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&he.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(o))}catch(e){n.apply(void 0,[e])}}function f(){ne.removeEventListener("DOMContentLoaded",f),e.removeEventListener("load",f),he.ready()}function d(){this.expando=he.expando+d.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Le.test(e)?JSON.parse(e):e)}function h(e,t,n){var o;if(void 0===n&&1===e.nodeType)if(o="data-"+t.replace(Fe,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(o))){try{n=p(n)}catch(e){}Ne.set(e,t,n)}else n=void 0;return n}function g(e,t,n,o){var i,r=1,s=20,a=o?function(){return o.cur()}:function(){return he.css(e,t,"")},c=a(),l=n&&n[3]||(he.cssNumber[t]?"":"px"),u=(he.cssNumber[t]||"px"!==l&&+c)&&Oe.exec(he.css(e,t));if(u&&u[3]!==l){l=l||u[3],n=n||[],u=+c||1;do{r=r||".5",u/=r,he.style(e,t,u+l)}while(r!==(r=a()/c)&&1!==r&&--s)}return n&&(u=+u||+c||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],o&&(o.unit=l,o.start=u,o.end=i)),i}function m(e){var t,n=e.ownerDocument,o=e.nodeName,i=He[o];return i||(t=n.body.appendChild(n.createElement(o)),i=he.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),He[o]=i,i)}function y(e,t){for(var n,o,i=[],r=0,s=e.length;r<s;r++)o=e[r],o.style&&(n=o.style.display,t?("none"===n&&(i[r]=De.get(o,"display")||null,i[r]||(o.style.display="")),""===o.style.display&&Re(o)&&(i[r]=m(o))):"none"!==n&&(i[r]="none",De.set(o,"display",n)));for(r=0;r<s;r++)null!=i[r]&&(e[r].style.display=i[r]);return e}function v(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&i(e,t)?he.merge([e],n):n}function b(e,t){for(var n=0,o=e.length;n<o;n++)De.set(e[n],"globalEval",!t||De.get(t[n],"globalEval"))}function x(e,t,n,o,i){for(var r,s,a,c,l,u,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((r=e[p])||0===r)if("object"===he.type(r))he.merge(d,r.nodeType?[r]:r);else if(Xe.test(r)){for(s=s||f.appendChild(t.createElement("div")),a=(We.exec(r)||["",""])[1].toLowerCase(),c=ze[a]||ze._default,s.innerHTML=c[1]+he.htmlPrefilter(r)+c[2],u=c[0];u--;)s=s.lastChild;he.merge(d,s.childNodes),s=f.firstChild,s.textContent=""}else d.push(t.createTextNode(r));for(f.textContent="",p=0;r=d[p++];)if(o&&he.inArray(r,o)>-1)i&&i.push(r);else if(l=he.contains(r.ownerDocument,r),s=v(f.appendChild(r),"script"),l&&b(s),n)for(u=0;r=s[u++];)_e.test(r.type||"")&&n.push(r);return f}function w(){return!0}function T(){return!1}function C(){try{return ne.activeElement}catch(e){}}function S(e,t,n,o,i,r){var s,a;if("object"==typeof t){"string"!=typeof n&&(o=o||n,n=void 0);for(a in t)S(e,a,n,o,t[a],r);return e}if(null==o&&null==i?(i=n,o=n=void 0):null==i&&("string"==typeof n?(i=o,o=void 0):(i=o,o=n,n=void 0)),!1===i)i=T;else if(!i)return e;return 1===r&&(s=i,i=function(e){return he().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=he.guid++)),e.each(function(){he.event.add(this,t,i,o,n)})}function $(e,t){return i(e,"table")&&i(11!==t.nodeType?t:t.firstChild,"tr")?he(">tbody",e)[0]||e:e}function k(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function E(e){var t=Je.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function P(e,t){var n,o,i,r,s,a,c,l;if(1===t.nodeType){if(De.hasData(e)&&(r=De.access(e),s=De.set(t,r),l=r.events)){delete s.handle,s.events={};for(i in l)for(n=0,o=l[i].length;n<o;n++)he.event.add(t,i,l[i][n])}Ne.hasData(e)&&(a=Ne.access(e),c=he.extend({},a),Ne.set(t,c))}}function A(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Be.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function j(e,t,o,i){t=re.apply([],t);var r,s,a,c,l,u,f=0,d=e.length,p=d-1,h=t[0],g=he.isFunction(h);if(g||d>1&&"string"==typeof h&&!pe.checkClone&&Ze.test(h))return e.each(function(n){var r=e.eq(n);g&&(t[0]=h.call(this,n,r.html())),j(r,t,o,i)});if(d&&(r=x(t,e[0].ownerDocument,!1,e,i),s=r.firstChild,1===r.childNodes.length&&(r=s),s||i)){for(a=he.map(v(r,"script"),k),c=a.length;f<d;f++)l=r,f!==p&&(l=he.clone(l,!0,!0),c&&he.merge(a,v(l,"script"))),o.call(e[f],l,f);if(c)for(u=a[a.length-1].ownerDocument,he.map(a,E),f=0;f<c;f++)l=a[f],_e.test(l.type||"")&&!De.access(l,"globalEval")&&he.contains(u,l)&&(l.src?he._evalUrl&&he._evalUrl(l.src):n(l.textContent.replace(Ke,""),u))}return e}function D(e,t,n){for(var o,i=t?he.filter(t,e):e,r=0;null!=(o=i[r]);r++)n||1!==o.nodeType||he.cleanData(v(o)),o.parentNode&&(n&&he.contains(o.ownerDocument,o)&&b(v(o,"script")),o.parentNode.removeChild(o));return e}function N(e,t,n){var o,i,r,s,a=e.style;return n=n||nt(e),n&&(s=n.getPropertyValue(t)||n[t],""!==s||he.contains(e.ownerDocument,e)||(s=he.style(e,t)),!pe.pixelMarginRight()&&tt.test(s)&&et.test(t)&&(o=a.width,i=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=o,a.minWidth=i,a.maxWidth=r)),void 0!==s?s+"":s}function L(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function F(e){if(e in ct)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=at.length;n--;)if((e=at[n]+t)in ct)return e}function I(e){var t=he.cssProps[e];return t||(t=he.cssProps[e]=F(e)||e),t}function O(e,t,n){var o=Oe.exec(t);return o?Math.max(0,o[2]-(n||0))+(o[3]||"px"):t}function q(e,t,n,o,i){var r,s=0;for(r=n===(o?"border":"content")?4:"width"===t?1:0;r<4;r+=2)"margin"===n&&(s+=he.css(e,n+qe[r],!0,i)),o?("content"===n&&(s-=he.css(e,"padding"+qe[r],!0,i)),"margin"!==n&&(s-=he.css(e,"border"+qe[r]+"Width",!0,i))):(s+=he.css(e,"padding"+qe[r],!0,i),"padding"!==n&&(s+=he.css(e,"border"+qe[r]+"Width",!0,i)));return s}function R(e,t,n){var o,i=nt(e),r=N(e,t,i),s="border-box"===he.css(e,"boxSizing",!1,i);return tt.test(r)?r:(o=s&&(pe.boxSizingReliable()||r===e.style[t]),"auto"===r&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)]),(r=parseFloat(r)||0)+q(e,t,n||(s?"border":"content"),o,i)+"px")}function M(e,t,n,o,i){return new M.prototype.init(e,t,n,o,i)}function H(){ut&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(H):e.setTimeout(H,he.fx.interval),he.fx.tick())}function B(){return e.setTimeout(function(){lt=void 0}),lt=he.now()}function W(e,t){var n,o=0,i={height:e};for(t=t?1:0;o<4;o+=2-t)n=qe[o],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function _(e,t,n){for(var o,i=(Q.tweeners[t]||[]).concat(Q.tweeners["*"]),r=0,s=i.length;r<s;r++)if(o=i[r].call(n,t,e))return o}function z(e,t,n){var o,i,r,s,a,c,l,u,f="width"in t||"height"in t,d=this,p={},h=e.style,g=e.nodeType&&Re(e),m=De.get(e,"fxshow");n.queue||(s=he._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,he.queue(e,"fx").length||s.empty.fire()})}));for(o in t)if(i=t[o],ft.test(i)){if(delete t[o],r=r||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[o])continue;g=!0}p[o]=m&&m[o]||he.style(e,o)}if((c=!he.isEmptyObject(t))||!he.isEmptyObject(p)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],l=m&&m.display,null==l&&(l=De.get(e,"display")),u=he.css(e,"display"),"none"===u&&(l?u=l:(y([e],!0),l=e.style.display||l,u=he.css(e,"display"),y([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===he.css(e,"float")&&(c||(d.done(function(){h.display=l}),null==l&&(u=h.display,l="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),c=!1;for(o in p)c||(m?"hidden"in m&&(g=m.hidden):m=De.access(e,"fxshow",{display:l}),r&&(m.hidden=!g),g&&y([e],!0),d.done(function(){g||y([e]),De.remove(e,"fxshow");for(o in p)he.style(e,o,p[o])})),c=_(g?m[o]:0,o,d),o in m||(m[o]=c.start,g&&(c.end=c.start,c.start=0))}}function X(e,t){var n,o,i,r,s;for(n in e)if(o=he.camelCase(n),i=t[o],r=e[n],Array.isArray(r)&&(i=r[1],r=e[n]=r[0]),n!==o&&(e[o]=r,delete e[n]),(s=he.cssHooks[o])&&"expand"in s){r=s.expand(r),delete e[o];for(n in r)n in e||(e[n]=r[n],t[n]=i)}else t[o]=i}function Q(e,t,n){var o,i,r=0,s=Q.prefilters.length,a=he.Deferred().always(function(){delete c.elem}),c=function(){if(i)return!1;for(var t=lt||B(),n=Math.max(0,l.startTime+l.duration-t),o=n/l.duration||0,r=1-o,s=0,c=l.tweens.length;s<c;s++)l.tweens[s].run(r);return a.notifyWith(e,[l,r,n]),r<1&&c?n:(c||a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:he.extend({},t),opts:he.extend(!0,{specialEasing:{},easing:he.easing._default},n),originalProperties:t,originalOptions:n,startTime:lt||B(),duration:n.duration,tweens:[],createTween:function(t,n){var o=he.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(o),o},stop:function(t){var n=0,o=t?l.tweens.length:0;if(i)return this;for(i=!0;n<o;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),u=l.props;for(X(u,l.opts.specialEasing);r<s;r++)if(o=Q.prefilters[r].call(l,e,u,l.opts))return he.isFunction(o.stop)&&(he._queueHooks(l.elem,l.opts.queue).stop=he.proxy(o.stop,o)),o;return he.map(u,_,l),he.isFunction(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),he.fx.timer(he.extend(c,{elem:e,anim:l,queue:l.opts.queue})),l}function Y(e){return(e.match(ke)||[]).join(" ")}function U(e){return e.getAttribute&&e.getAttribute("class")||""}function V(e,t,n,o){var i;if(Array.isArray(t))he.each(t,function(t,i){n||wt.test(e)?o(e,i):V(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,o)});else if(n||"object"!==he.type(t))o(e,t);else for(i in t)V(e+"["+i+"]",t[i],n,o)}function G(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var o,i=0,r=t.toLowerCase().match(ke)||[];if(he.isFunction(n))for(;o=r[i++];)"+"===o[0]?(o=o.slice(1)||"*",(e[o]=e[o]||[]).unshift(n)):(e[o]=e[o]||[]).push(n)}}function Z(e,t,n,o){function i(a){var c;return r[a]=!0,he.each(e[a]||[],function(e,a){var l=a(t,n,o);return"string"!=typeof l||s||r[l]?s?!(c=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),c}var r={},s=e===Pt;return i(t.dataTypes[0])||!r["*"]&&i("*")}function J(e,t){var n,o,i=he.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:o||(o={}))[n]=t[n]);return o&&he.extend(!0,e,o),e}function K(e,t,n){for(var o,i,r,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===o&&(o=e.mimeType||t.getResponseHeader("Content-Type"));if(o)for(i in a)if(a[i]&&a[i].test(o)){c.unshift(i);break}if(c[0]in n)r=c[0];else{for(i in n){if(!c[0]||e.converters[i+" "+c[0]]){r=i;break}s||(s=i)}r=r||s}if(r)return r!==c[0]&&c.unshift(r),n[r]}function ee(e,t,n,o){var i,r,s,a,c,l={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!c&&o&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=r,r=u.shift())if("*"===r)r=c;else if("*"!==c&&c!==r){if(!(s=l[c+" "+r]||l["* "+r]))for(i in l)if(a=i.split(" "),a[1]===r&&(s=l[c+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[i]:!0!==l[i]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+r}}}return{state:"success",data:t}}var te=[],ne=e.document,oe=Object.getPrototypeOf,ie=te.slice,re=te.concat,se=te.push,ae=te.indexOf,ce={},le=ce.toString,ue=ce.hasOwnProperty,fe=ue.toString,de=fe.call(Object),pe={},he=function(e,t){return new he.fn.init(e,t)},ge=function(e,t){return t.toUpperCase()};he.fn=he.prototype={jquery:"3.2.1",constructor:he,length:0,toArray:function(){return ie.call(this)},get:function(e){return null==e?ie.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=he.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return he.each(this,e)},map:function(e){return this.pushStack(he.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:se,sort:te.sort,splice:te.splice},he.extend=he.fn.extend=function(){var e,t,n,o,i,r,s=arguments[0]||{},a=1,c=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||he.isFunction(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],o=e[t],s!==o&&(l&&o&&(he.isPlainObject(o)||(i=Array.isArray(o)))?(i?(i=!1,r=n&&Array.isArray(n)?n:[]):r=n&&he.isPlainObject(n)?n:{},s[t]=he.extend(l,r,o)):void 0!==o&&(s[t]=o));return s},he.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===he.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=he.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==le.call(e)||(t=oe(e))&&("function"!=typeof(n=ue.call(t,"constructor")&&t.constructor)||fe.call(n)!==de))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ce[le.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(/^-ms-/,"ms-").replace(/-([a-z])/g,ge)},each:function(e,t){var n,i=0;if(o(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(o(Object(e))?he.merge(n,"string"==typeof e?[e]:e):se.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:ae.call(t,e,n)},merge:function(e,t){for(var n=+t.length,o=0,i=e.length;o<n;o++)e[i++]=t[o];return e.length=i,e},grep:function(e,t,n){for(var o=[],i=0,r=e.length,s=!n;i<r;i++)!t(e[i],i)!==s&&o.push(e[i]);return o},map:function(e,t,n){var i,r,s=0,a=[];if(o(e))for(i=e.length;s<i;s++)null!=(r=t(e[s],s,n))&&a.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&a.push(r);return re.apply([],a)},guid:1,proxy:function(e,t){var n,o,i;if("string"==typeof t&&(n=e[t],t=e,e=n),he.isFunction(e))return o=ie.call(arguments,2),i=function(){return e.apply(t||this,o.concat(ie.call(arguments)))},i.guid=e.guid=e.guid||he.guid++,i},now:Date.now,support:pe}),"function"==typeof Symbol&&(he.fn[Symbol.iterator]=te[Symbol.iterator]),he.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ce["[object "+t+"]"]=t.toLowerCase()});var me=function(e){function t(e,t,n,o){var i,r,s,a,c,u,d,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!o&&((t?t.ownerDocument||t:M)!==D&&j(t),t=t||D,L)){if(11!==h&&(c=ge.exec(e)))if(i=c[1]){if(9===h){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(p&&(s=p.getElementById(i))&&q(t,s)&&s.id===i)return n.push(s),n}else{if(c[2])return G.apply(n,t.getElementsByTagName(e)),n;if((i=c[3])&&x.getElementsByClassName&&t.getElementsByClassName)return G.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!z[e+" "]&&(!F||!F.test(e))){if(1!==h)p=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(be,xe):t.setAttribute("id",a=R),u=S(e),r=u.length;r--;)u[r]="#"+a+" "+f(u[r]);d=u.join(","),p=me.test(e)&&l(t.parentNode)||t}if(d)try{return G.apply(n,p.querySelectorAll(d)),n}catch(e){}finally{a===R&&t.removeAttribute("id")}}}return k(e.replace(re,"$1"),t,n,o)}function n(){function e(n,o){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=o}var t=[];return e}function o(e){return e[R]=!0,e}function i(e){var t=D.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split("|"),o=n.length;o--;)w.attrHandle[n[o]]=t}function s(e,t){var n=t&&e,o=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(o)return o;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Te(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function c(e){return o(function(t){return t=+t,o(function(n,o){for(var i,r=e([],n.length,t),s=r.length;s--;)n[i=r[s]]&&(n[i]=!(o[i]=n[i]))})})}function l(e){return e&&void 0!==e.getElementsByTagName&&e}function u(){}function f(e){for(var t=0,n=e.length,o="";t<n;t++)o+=e[t].value;return o}function d(e,t,n){var o=t.dir,i=t.next,r=i||o,s=n&&"parentNode"===r,a=B++;return t.first?function(t,n,i){for(;t=t[o];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,c){var l,u,f,d=[H,a];if(c){for(;t=t[o];)if((1===t.nodeType||s)&&e(t,n,c))return!0}else for(;t=t[o];)if(1===t.nodeType||s)if(f=t[R]||(t[R]={}),u=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[o]||t;else{if((l=u[r])&&l[0]===H&&l[1]===a)return d[2]=l[2];if(u[r]=d,d[2]=e(t,n,c))return!0}return!1}}function p(e){return e.length>1?function(t,n,o){for(var i=e.length;i--;)if(!e[i](t,n,o))return!1;return!0}:e[0]}function h(e,n,o){for(var i=0,r=n.length;i<r;i++)t(e,n[i],o);return o}function g(e,t,n,o,i){for(var r,s=[],a=0,c=e.length,l=null!=t;a<c;a++)(r=e[a])&&(n&&!n(r,o,i)||(s.push(r),l&&t.push(a)));return s}function m(e,t,n,i,r,s){return i&&!i[R]&&(i=m(i)),r&&!r[R]&&(r=m(r,s)),o(function(o,s,a,c){var l,u,f,d=[],p=[],m=s.length,y=o||h(t||"*",a.nodeType?[a]:a,[]),v=!e||!o&&t?y:g(y,d,e,a,c),b=n?r||(o?e:m||i)?[]:s:v;if(n&&n(v,b,a,c),i)for(l=g(b,p),i(l,[],a,c),u=l.length;u--;)(f=l[u])&&(b[p[u]]=!(v[p[u]]=f));if(o){if(r||e){if(r){for(l=[],u=b.length;u--;)(f=b[u])&&l.push(v[u]=f);r(null,b=[],l,c)}for(u=b.length;u--;)(f=b[u])&&(l=r?J(o,f):d[u])>-1&&(o[l]=!(s[l]=f))}}else b=g(b===s?b.splice(m,b.length):b),r?r(null,s,b,c):G.apply(s,b)})}function y(e){for(var t,n,o,i=e.length,r=w.relative[e[0].type],s=r||w.relative[" "],a=r?1:0,c=d(function(e){return e===t},s,!0),l=d(function(e){return J(t,e)>-1},s,!0),u=[function(e,n,o){var i=!r&&(o||n!==E)||((t=n).nodeType?c(e,n,o):l(e,n,o));return t=null,i}];a<i;a++)if(n=w.relative[e[a].type])u=[d(p(u),n)];else{if(n=w.filter[e[a].type].apply(null,e[a].matches),n[R]){for(o=++a;o<i&&!w.relative[e[o].type];o++);return m(a>1&&p(u),a>1&&f(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(re,"$1"),n,a<o&&y(e.slice(a,o)),o<i&&y(e=e.slice(o)),o<i&&f(e))}u.push(n)}return p(u)}function v(e,n){var i=n.length>0,r=e.length>0,s=function(o,s,a,c,l){var u,f,d,p=0,h="0",m=o&&[],y=[],v=E,b=o||r&&w.find.TAG("*",l),x=H+=null==v?1:Math.random()||.1,T=b.length;for(l&&(E=s===D||s||l);h!==T&&null!=(u=b[h]);h++){if(r&&u){for(f=0,s||u.ownerDocument===D||(j(u),a=!L);d=e[f++];)if(d(u,s||D,a)){c.push(u);break}l&&(H=x)}i&&((u=!d&&u)&&p--,o&&m.push(u))}if(p+=h,i&&h!==p){for(f=0;d=n[f++];)d(m,y,s,a);if(o){if(p>0)for(;h--;)m[h]||y[h]||(y[h]=U.call(c));y=g(y)}G.apply(c,y),l&&!o&&y.length>0&&p+n.length>1&&t.uniqueSort(c)}return l&&(H=x,E=v),m};return i?o(s):s}var b,x,w,T,C,S,$,k,E,P,A,j,D,N,L,F,I,O,q,R="sizzle"+1*new Date,M=e.document,H=0,B=0,W=n(),_=n(),z=n(),X=function(e,t){return e===t&&(A=!0),0},Q={}.hasOwnProperty,Y=[],U=Y.pop,V=Y.push,G=Y.push,Z=Y.slice,J=function(e,t){for(var n=0,o=e.length;n<o;n++)if(e[n]===t)return n;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",oe=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),ce=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),le=new RegExp(oe),ue=new RegExp("^"+te+"$"),fe={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},de=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ye=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ve=function(e,t,n){var o="0x"+t-65536;return o!==o||n?t:o<0?String.fromCharCode(o+65536):String.fromCharCode(o>>10|55296,1023&o|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){j()},Te=d(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{G.apply(Y=Z.call(M.childNodes),M.childNodes),Y[M.childNodes.length].nodeType}catch(e){G={apply:Y.length?function(e,t){V.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,o=0;e[n++]=t[o++];);e.length=n-1}}}x=t.support={},C=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},j=t.setDocument=function(e){var t,n,o=e?e.ownerDocument||e:M;return o!==D&&9===o.nodeType&&o.documentElement?(D=o,N=D.documentElement,L=!C(D),M!==D&&(n=D.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(D.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(D.getElementsByClassName),x.getById=i(function(e){return N.appendChild(e).id=R,!D.getElementsByName||!D.getElementsByName(R).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ye,ve);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ye,ve);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n,o,i,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(i=t.getElementsByName(e),o=0;r=i[o++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,o=[],i=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[i++];)1===n.nodeType&&o.push(n);return o}return r},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&L)return t.getElementsByClassName(e)},I=[],F=[],(x.qsa=he.test(D.querySelectorAll))&&(i(function(e){N.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+ee+"*(?:value|"+K+")"),e.querySelectorAll("[id~="+R+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||F.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=D.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&F.push(":enabled",":disabled"),N.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(x.matchesSelector=he.test(O=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&i(function(e){x.disconnectedMatch=O.call(e,"*"),O.call(e,"[s!='']:x"),I.push("!=",oe)}),F=F.length&&new RegExp(F.join("|")),I=I.length&&new RegExp(I.join("|")),t=he.test(N.compareDocumentPosition),q=t||he.test(N.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,o=t&&t.parentNode;return e===o||!(!o||1!==o.nodeType||!(n.contains?n.contains(o):e.compareDocumentPosition&&16&e.compareDocumentPosition(o)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},X=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===D||e.ownerDocument===M&&q(M,e)?-1:t===D||t.ownerDocument===M&&q(M,t)?1:P?J(P,e)-J(P,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,o=0,i=e.parentNode,r=t.parentNode,a=[e],c=[t];if(!i||!r)return e===D?-1:t===D?1:i?-1:r?1:P?J(P,e)-J(P,t):0;if(i===r)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)c.unshift(n);for(;a[o]===c[o];)o++;return o?s(a[o],c[o]):a[o]===M?-1:c[o]===M?1:0},D):D},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==D&&j(e),n=n.replace(ce,"='$1']"),x.matchesSelector&&L&&!z[n+" "]&&(!I||!I.test(n))&&(!F||!F.test(n)))try{var o=O.call(e,n);if(o||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return o}catch(e){}return t(n,D,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==D&&j(e),q(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==D&&j(e);var n=w.attrHandle[t.toLowerCase()],o=n&&Q.call(w.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==o?o:x.attributes||!L?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],o=0,i=0;if(A=!x.detectDuplicates,P=!x.sortStable&&e.slice(0),e.sort(X),A){for(;t=e[i++];)t===e[i]&&(o=n.push(i));for(;o--;)e.splice(n[o],1)}return P=null,e},T=t.getText=function(e){var t,n="",o=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[o++];)n+=T(t);return n},w=t.selectors={cacheLength:50,createPseudo:o,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ye,ve),e[3]=(e[3]||e[4]||e[5]||"").replace(ye,ve),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&le.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ye,ve).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,o){return function(i){var r=t.attr(i,e);return null==r?"!="===n:!n||(r+="","="===n?r===o:"!="===n?r!==o:"^="===n?o&&0===r.indexOf(o):"*="===n?o&&r.indexOf(o)>-1:"$="===n?o&&r.slice(-o.length)===o:"~="===n?(" "+r.replace(ie," ")+" ").indexOf(o)>-1:"|="===n&&(r===o||r.slice(0,o.length+1)===o+"-"))}},CHILD:function(e,t,n,o,i){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===o&&0===i?function(e){return!!e.parentNode}:function(t,n,c){var l,u,f,d,p,h,g=r!==s?"nextSibling":"previousSibling",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),v=!c&&!a,b=!1;if(m){if(r){for(;g;){for(d=t;d=d[g];)if(a?d.nodeName.toLowerCase()===y:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&v){for(d=m,f=d[R]||(d[R]={}),u=f[d.uniqueID]||(f[d.uniqueID]={}),l=u[e]||[],p=l[0]===H&&l[1],b=p&&l[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){u[e]=[H,p,b];break}}else if(v&&(d=t,f=d[R]||(d[R]={}),u=f[d.uniqueID]||(f[d.uniqueID]={}),l=u[e]||[],p=l[0]===H&&l[1],b=p),!1===b)for(;(d=++p&&d&&d[g]||(b=p=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==y:1!==d.nodeType)||!++b||(v&&(f=d[R]||(d[R]={}),u=f[d.uniqueID]||(f[d.uniqueID]={}),u[e]=[H,b]),d!==t)););return(b-=i)===o||b%o==0&&b/o>=0}}},PSEUDO:function(e,n){var i,r=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[R]?r(n):r.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?o(function(e,t){for(var o,i=r(e,n),s=i.length;s--;)o=J(e,i[s]),e[o]=!(t[o]=i[s])}):function(e){return r(e,0,i)}):r}},pseudos:{not:o(function(e){var t=[],n=[],i=$(e.replace(re,"$1"));return i[R]?o(function(e,t,n,o){for(var r,s=i(e,null,o,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))}):function(e,o,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}}),has:o(function(e){return function(n){return t(e,n).length>0}}),contains:o(function(e){return e=e.replace(ye,ve),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)>-1}}),lang:o(function(e){return ue.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ye,ve).toLowerCase(),function(t){var n;do{if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===N},focus:function(e){return e===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:a(!1),disabled:a(!0),
checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return de.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[n<0?n+t:n]}),even:c(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var o=n<0?n+t:n;--o>=0;)e.push(o);return e}),gt:c(function(e,t,n){for(var o=n<0?n+t:n;++o<t;)e.push(o);return e})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return u.prototype=w.filters=w.pseudos,w.setFilters=new u,S=t.tokenize=function(e,n){var o,i,r,s,a,c,l,u=_[e+" "];if(u)return n?0:u.slice(0);for(a=e,c=[],l=w.preFilter;a;){o&&!(i=se.exec(a))||(i&&(a=a.slice(i[0].length)||a),c.push(r=[])),o=!1,(i=ae.exec(a))&&(o=i.shift(),r.push({value:o,type:i[0].replace(re," ")}),a=a.slice(o.length));for(s in w.filter)!(i=fe[s].exec(a))||l[s]&&!(i=l[s](i))||(o=i.shift(),r.push({value:o,type:s,matches:i}),a=a.slice(o.length));if(!o)break}return n?a.length:a?t.error(e):_(e,c).slice(0)},$=t.compile=function(e,t){var n,o=[],i=[],r=z[e+" "];if(!r){for(t||(t=S(e)),n=t.length;n--;)r=y(t[n]),r[R]?o.push(r):i.push(r);r=z(e,v(i,o)),r.selector=e}return r},k=t.select=function(e,t,n,o){var i,r,s,a,c,u="function"==typeof e&&e,d=!o&&S(e=u.selector||e);if(n=n||[],1===d.length){if(r=d[0]=d[0].slice(0),r.length>2&&"ID"===(s=r[0]).type&&9===t.nodeType&&L&&w.relative[r[1].type]){if(!(t=(w.find.ID(s.matches[0].replace(ye,ve),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(i=fe.needsContext.test(e)?0:r.length;i--&&(s=r[i],!w.relative[a=s.type]);)if((c=w.find[a])&&(o=c(s.matches[0].replace(ye,ve),me.test(r[0].type)&&l(t.parentNode)||t))){if(r.splice(i,1),!(e=o.length&&f(r)))return G.apply(n,o),n;break}}return(u||$(e,d))(o,t,!L,n,!t||me.test(e)&&l(t.parentNode)||t),n},x.sortStable=R.split("").sort(X).join("")===R,x.detectDuplicates=!!A,j(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(D.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||r(K,function(e,t,n){var o;if(!n)return!0===e[t]?t.toLowerCase():(o=e.getAttributeNode(t))&&o.specified?o.value:null}),t}(e);he.find=me,he.expr=me.selectors,he.expr[":"]=he.expr.pseudos,he.uniqueSort=he.unique=me.uniqueSort,he.text=me.getText,he.isXMLDoc=me.isXML,he.contains=me.contains,he.escapeSelector=me.escape;var ye=function(e,t,n){for(var o=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&he(e).is(n))break;o.push(e)}return o},ve=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},be=he.expr.match.needsContext,xe=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,we=/^.[^:#\[\.,]*$/;he.filter=function(e,t,n){var o=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===o.nodeType?he.find.matchesSelector(o,e)?[o]:[]:he.find.matches(e,he.grep(t,function(e){return 1===e.nodeType}))},he.fn.extend({find:function(e){var t,n,o=this.length,i=this;if("string"!=typeof e)return this.pushStack(he(e).filter(function(){for(t=0;t<o;t++)if(he.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<o;t++)he.find(e,i[t],n);return o>1?he.uniqueSort(n):n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&be.test(e)?he(e):e||[],!1).length}});var Te,Ce=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(he.fn.init=function(e,t,n){var o,i;if(!e)return this;if(n=n||Te,"string"==typeof e){if(!(o="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ce.exec(e))||!o[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(o[1]){if(t=t instanceof he?t[0]:t,he.merge(this,he.parseHTML(o[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),xe.test(o[1])&&he.isPlainObject(t))for(o in t)he.isFunction(this[o])?this[o](t[o]):this.attr(o,t[o]);return this}return i=ne.getElementById(o[2]),i&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):he.isFunction(e)?void 0!==n.ready?n.ready(e):e(he):he.makeArray(e,this)}).prototype=he.fn,Te=he(ne);var Se=/^(?:parents|prev(?:Until|All))/,$e={children:!0,contents:!0,next:!0,prev:!0};he.fn.extend({has:function(e){var t=he(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(he.contains(this,t[e]))return!0})},closest:function(e,t){var n,o=0,i=this.length,r=[],s="string"!=typeof e&&he(e);if(!be.test(e))for(;o<i;o++)for(n=this[o];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&he.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?he.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?ae.call(he(e),this[0]):ae.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(he.uniqueSort(he.merge(this.get(),he(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),he.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ye(e,"parentNode")},parentsUntil:function(e,t,n){return ye(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return ye(e,"nextSibling")},prevAll:function(e){return ye(e,"previousSibling")},nextUntil:function(e,t,n){return ye(e,"nextSibling",n)},prevUntil:function(e,t,n){return ye(e,"previousSibling",n)},siblings:function(e){return ve((e.parentNode||{}).firstChild,e)},children:function(e){return ve(e.firstChild)},contents:function(e){return i(e,"iframe")?e.contentDocument:(i(e,"template")&&(e=e.content||e),he.merge([],e.childNodes))}},function(e,t){he.fn[e]=function(n,o){var i=he.map(this,t,n);return"Until"!==e.slice(-5)&&(o=n),o&&"string"==typeof o&&(i=he.filter(o,i)),this.length>1&&($e[e]||he.uniqueSort(i),Se.test(e)&&i.reverse()),this.pushStack(i)}});var ke=/[^\x20\t\r\n\f]+/g;he.Callbacks=function(e){e="string"==typeof e?a(e):he.extend({},e);var t,n,o,i,r=[],s=[],c=-1,l=function(){for(i=i||e.once,o=t=!0;s.length;c=-1)for(n=s.shift();++c<r.length;)!1===r[c].apply(n[0],n[1])&&e.stopOnFalse&&(c=r.length,n=!1);e.memory||(n=!1),t=!1,i&&(r=n?[]:"")},u={add:function(){return r&&(n&&!t&&(c=r.length-1,s.push(n)),function t(n){he.each(n,function(n,o){he.isFunction(o)?e.unique&&u.has(o)||r.push(o):o&&o.length&&"string"!==he.type(o)&&t(o)})}(arguments),n&&!t&&l()),this},remove:function(){return he.each(arguments,function(e,t){for(var n;(n=he.inArray(t,r,n))>-1;)r.splice(n,1),n<=c&&c--}),this},has:function(e){return e?he.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return i=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return i=s=[],n||t||(r=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!o}};return u},he.extend({Deferred:function(t){var n=[["notify","progress",he.Callbacks("memory"),he.Callbacks("memory"),2],["resolve","done",he.Callbacks("once memory"),he.Callbacks("once memory"),0,"resolved"],["reject","fail",he.Callbacks("once memory"),he.Callbacks("once memory"),1,"rejected"]],o="pending",i={state:function(){return o},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return he.Deferred(function(t){he.each(n,function(n,o){var i=he.isFunction(e[o[4]])&&e[o[4]];r[o[1]](function(){var e=i&&i.apply(this,arguments);e&&he.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[o[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,o,i){function r(t,n,o,i){return function(){var a=this,u=arguments,f=function(){var e,f;if(!(t<s)){if((e=o.apply(a,u))===n.promise())throw new TypeError("Thenable self-resolution");f=e&&("object"==typeof e||"function"==typeof e)&&e.then,he.isFunction(f)?i?f.call(e,r(s,n,c,i),r(s,n,l,i)):(s++,f.call(e,r(s,n,c,i),r(s,n,l,i),r(s,n,c,n.notifyWith))):(o!==c&&(a=void 0,u=[e]),(i||n.resolveWith)(a,u))}},d=i?f:function(){try{f()}catch(e){he.Deferred.exceptionHook&&he.Deferred.exceptionHook(e,d.stackTrace),t+1>=s&&(o!==l&&(a=void 0,u=[e]),n.rejectWith(a,u))}};t?d():(he.Deferred.getStackHook&&(d.stackTrace=he.Deferred.getStackHook()),e.setTimeout(d))}}var s=0;return he.Deferred(function(e){n[0][3].add(r(0,e,he.isFunction(i)?i:c,e.notifyWith)),n[1][3].add(r(0,e,he.isFunction(t)?t:c)),n[2][3].add(r(0,e,he.isFunction(o)?o:l))}).promise()},promise:function(e){return null!=e?he.extend(e,i):i}},r={};return he.each(n,function(e,t){var s=t[2],a=t[5];i[t[1]]=s.add,a&&s.add(function(){o=a},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=s.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,o=Array(n),i=ie.call(arguments),r=he.Deferred(),s=function(e){return function(n){o[e]=this,i[e]=arguments.length>1?ie.call(arguments):n,--t||r.resolveWith(o,i)}};if(t<=1&&(u(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||he.isFunction(i[n]&&i[n].then)))return r.then();for(;n--;)u(i[n],s(n),r.reject);return r.promise()}});var Ee=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;he.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ee.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},he.readyException=function(t){e.setTimeout(function(){throw t})};var Pe=he.Deferred();he.fn.ready=function(e){return Pe.then(e).catch(function(e){he.readyException(e)}),this},he.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--he.readyWait:he.isReady)||(he.isReady=!0,!0!==e&&--he.readyWait>0||Pe.resolveWith(ne,[he]))}}),he.ready.then=Pe.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(he.ready):(ne.addEventListener("DOMContentLoaded",f),e.addEventListener("load",f));var Ae=function(e,t,n,o,i,r,s){var a=0,c=e.length,l=null==n;if("object"===he.type(n)){i=!0;for(a in n)Ae(e,t,a,n[a],!0,r,s)}else if(void 0!==o&&(i=!0,he.isFunction(o)||(s=!0),l&&(s?(t.call(e,o),t=null):(l=t,t=function(e,t,n){return l.call(he(e),n)})),t))for(;a<c;a++)t(e[a],n,s?o:o.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):c?t(e[0],n):r},je=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};d.uid=1,d.prototype={cache:function(e){var t=e[this.expando];return t||(t={},je(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var o,i=this.cache(e);if("string"==typeof t)i[he.camelCase(t)]=n;else for(o in t)i[he.camelCase(o)]=t[o];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][he.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,o=e[this.expando];if(void 0!==o){if(void 0!==t){Array.isArray(t)?t=t.map(he.camelCase):(t=he.camelCase(t),t=t in o?[t]:t.match(ke)||[]),n=t.length;for(;n--;)delete o[t[n]]}(void 0===t||he.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!he.isEmptyObject(t)}};var De=new d,Ne=new d,Le=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Fe=/[A-Z]/g;he.extend({hasData:function(e){return Ne.hasData(e)||De.hasData(e)},data:function(e,t,n){return Ne.access(e,t,n)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,n){return De.access(e,t,n)},_removeData:function(e,t){De.remove(e,t)}}),he.fn.extend({data:function(e,t){var n,o,i,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(i=Ne.get(r),1===r.nodeType&&!De.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(o=s[n].name,0===o.indexOf("data-")&&(o=he.camelCase(o.slice(5)),h(r,o,i[o])));De.set(r,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Ae(this,function(t){var n;if(r&&void 0===t){if(void 0!==(n=Ne.get(r,e)))return n;if(void 0!==(n=h(r,e)))return n}else this.each(function(){Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),he.extend({queue:function(e,t,n){var o;if(e)return t=(t||"fx")+"queue",o=De.get(e,t),n&&(!o||Array.isArray(n)?o=De.access(e,t,he.makeArray(n)):o.push(n)),o||[]},dequeue:function(e,t){t=t||"fx";var n=he.queue(e,t),o=n.length,i=n.shift(),r=he._queueHooks(e,t),s=function(){he.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),o--),i&&("fx"===t&&n.unshift("inprogress"),delete r.stop,i.call(e,s,r)),!o&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return De.get(e,n)||De.access(e,n,{empty:he.Callbacks("once memory").add(function(){De.remove(e,[t+"queue",n])})})}}),he.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?he.queue(this[0],e):void 0===t?this:this.each(function(){var n=he.queue(this,e,t);he._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&he.dequeue(this,e)})},dequeue:function(e){return this.each(function(){he.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,o=1,i=he.Deferred(),r=this,s=this.length,a=function(){--o||i.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=De.get(r[s],e+"queueHooks"))&&n.empty&&(o++,n.empty.add(a));return a(),i.promise(t)}});var Ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Oe=new RegExp("^(?:([+-])=|)("+Ie+")([a-z%]*)$","i"),qe=["Top","Right","Bottom","Left"],Re=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&he.contains(e.ownerDocument,e)&&"none"===he.css(e,"display")},Me=function(e,t,n,o){var i,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];i=n.apply(e,o||[]);for(r in t)e.style[r]=s[r];return i},He={};he.fn.extend({show:function(){return y(this,!0)},hide:function(){return y(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Re(this)?he(this).show():he(this).hide()})}});var Be=/^(?:checkbox|radio)$/i,We=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,_e=/^$|\/(?:java|ecma)script/i,ze={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ze.optgroup=ze.option,ze.tbody=ze.tfoot=ze.colgroup=ze.caption=ze.thead,ze.th=ze.td;var Xe=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment(),t=e.appendChild(ne.createElement("div")),n=ne.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),pe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Qe=ne.documentElement,Ye=/^key/,Ue=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ve=/^([^.]*)(?:\.(.+)|)/;he.event={global:{},add:function(e,t,n,o,i){var r,s,a,c,l,u,f,d,p,h,g,m=De.get(e);if(m)for(n.handler&&(r=n,n=r.handler,i=r.selector),i&&he.find.matchesSelector(Qe,i),n.guid||(n.guid=he.guid++),(c=m.events)||(c=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==he&&he.event.triggered!==t.type?he.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(ke)||[""],l=t.length;l--;)a=Ve.exec(t[l])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p&&(f=he.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=he.event.special[p]||{},u=he.extend({type:p,origType:g,data:o,handler:n,guid:n.guid,selector:i,needsContext:i&&he.expr.match.needsContext.test(i),namespace:h.join(".")},r),(d=c[p])||(d=c[p]=[],d.delegateCount=0,f.setup&&!1!==f.setup.call(e,o,h,s)||e.addEventListener&&e.addEventListener(p,s)),f.add&&(f.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,u):d.push(u),he.event.global[p]=!0)},remove:function(e,t,n,o,i){var r,s,a,c,l,u,f,d,p,h,g,m=De.hasData(e)&&De.get(e);if(m&&(c=m.events)){for(t=(t||"").match(ke)||[""],l=t.length;l--;)if(a=Ve.exec(t[l])||[],p=g=a[1],h=(a[2]||"").split(".").sort(),p){for(f=he.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,d=c[p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=d.length;r--;)u=d[r],!i&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||o&&o!==u.selector&&("**"!==o||!u.selector)||(d.splice(r,1),u.selector&&d.delegateCount--,f.remove&&f.remove.call(e,u));s&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,m.handle)||he.removeEvent(e,p,m.handle),delete c[p])}else for(p in c)he.event.remove(e,p+t[l],n,o,!0);he.isEmptyObject(c)&&De.remove(e,"handle events")}},dispatch:function(e){var t,n,o,i,r,s,a=he.event.fix(e),c=new Array(arguments.length),l=(De.get(this,"events")||{})[a.type]||[],u=he.event.special[a.type]||{};for(c[0]=a,t=1;t<arguments.length;t++)c[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=he.event.handlers.call(this,a,l),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(r=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(o=((he.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,c))&&!1===(a.result=o)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,o,i,r,s,a=[],c=t.delegateCount,l=e.target;if(c&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(r=[],s={},n=0;n<c;n++)o=t[n],i=o.selector+" ",void 0===s[i]&&(s[i]=o.needsContext?he(i,this).index(l)>-1:he.find(i,this,null,[l]).length),s[i]&&r.push(o);r.length&&a.push({elem:l,handlers:r})}return l=this,c<t.length&&a.push({elem:l,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(he.Event.prototype,e,{enumerable:!0,configurable:!0,get:he.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[he.expando]?e:new he.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==C()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===C()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&i(this,"input"))return this.click(),!1},_default:function(e){return i(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},he.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},he.Event=function(e,t){if(!(this instanceof he.Event))return new he.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:T,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&he.extend(this,t),this.timeStamp=e&&e.timeStamp||he.now(),this[he.expando]=!0},he.Event.prototype={constructor:he.Event,isDefaultPrevented:T,isPropagationStopped:T,isImmediatePropagationStopped:T,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},he.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ye.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ue.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},he.event.addProp),he.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){he.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,o=this,i=e.relatedTarget,r=e.handleObj;return i&&(i===o||he.contains(o,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),he.fn.extend({on:function(e,t,n,o){return S(this,e,t,n,o)},one:function(e,t,n,o){return S(this,e,t,n,o,1)},off:function(e,t,n){var o,i;if(e&&e.preventDefault&&e.handleObj)return o=e.handleObj,he(e.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=T),this.each(function(){he.event.remove(this,e,n,t)})}});var Ge=/<script|<style|<link/i,Ze=/checked\s*(?:[^=]|=\s*.checked.)/i,Je=/^true\/(.*)/,Ke=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;he.extend({htmlPrefilter:function(e){return e.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,"<$1></$2>")},clone:function(e,t,n){var o,i,r,s,a=e.cloneNode(!0),c=he.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||he.isXMLDoc(e)))for(s=v(a),r=v(e),o=0,i=r.length;o<i;o++)A(r[o],s[o]);if(t)if(n)for(r=r||v(e),s=s||v(a),o=0,i=r.length;o<i;o++)P(r[o],s[o]);else P(e,a);return s=v(a,"script"),s.length>0&&b(s,!c&&v(e,"script")),a},cleanData:function(e){for(var t,n,o,i=he.event.special,r=0;void 0!==(n=e[r]);r++)if(je(n)){if(t=n[De.expando]){if(t.events)for(o in t.events)i[o]?he.event.remove(n,o):he.removeEvent(n,o,t.handle);n[De.expando]=void 0}n[Ne.expando]&&(n[Ne.expando]=void 0)}}}),he.fn.extend({detach:function(e){return D(this,e,!0)},remove:function(e){return D(this,e)},text:function(e){return Ae(this,function(e){return void 0===e?he.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return j(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||$(this,e).appendChild(e)})},prepend:function(){return j(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=$(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(he.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return he.clone(this,e,t)})},html:function(e){return Ae(this,function(e){var t=this[0]||{},n=0,o=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ge.test(e)&&!ze[(We.exec(e)||["",""])[1].toLowerCase()]){e=he.htmlPrefilter(e);try{for(;n<o;n++)t=this[n]||{},1===t.nodeType&&(he.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return j(this,arguments,function(t){var n=this.parentNode;he.inArray(this,e)<0&&(he.cleanData(v(this)),n&&n.replaceChild(t,this))},e)}}),he.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){he.fn[e]=function(e){for(var n,o=[],i=he(e),r=i.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),he(i[s])[t](n),se.apply(o,n.get());return this.pushStack(o)}});var et=/^margin/,tt=new RegExp("^("+Ie+")(?!px)[a-z%]+$","i"),nt=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Qe.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,r="2px"===t.marginLeft,o="4px"===t.width,a.style.marginRight="50%",i="4px"===t.marginRight,Qe.removeChild(s),a=null}}var n,o,i,r,s=ne.createElement("div"),a=ne.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),he.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),o},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),r}}))}();var ot=/^(none|table(?!-c[ea]).+)/,it=/^--/,rt={position:"absolute",visibility:"hidden",display:"block"},st={letterSpacing:"0",fontWeight:"400"},at=["Webkit","Moz","ms"],ct=ne.createElement("div").style;he.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=N(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,o){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,r,s,a=he.camelCase(t),c=it.test(t),l=e.style;if(c||(t=I(a)),s=he.cssHooks[t]||he.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,o))?i:l[t];r=typeof n,"string"===r&&(i=Oe.exec(n))&&i[1]&&(n=g(e,t,i),r="number"),null!=n&&n===n&&("number"===r&&(n+=i&&i[3]||(he.cssNumber[a]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,o))||(c?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,o){var i,r,s,a=he.camelCase(t);return it.test(t)||(t=I(a)),s=he.cssHooks[t]||he.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=N(e,t,o)),"normal"===i&&t in st&&(i=st[t]),""===n||n?(r=parseFloat(i),!0===n||isFinite(r)?r||0:i):i}}),he.each(["height","width"],function(e,t){he.cssHooks[t]={get:function(e,n,o){if(n)return!ot.test(he.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?R(e,t,o):Me(e,rt,function(){return R(e,t,o)})},set:function(e,n,o){var i,r=o&&nt(e),s=o&&q(e,t,o,"border-box"===he.css(e,"boxSizing",!1,r),r);return s&&(i=Oe.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=he.css(e,t)),O(e,n,s)}}}),he.cssHooks.marginLeft=L(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(N(e,"marginLeft"))||e.getBoundingClientRect().left-Me(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),he.each({margin:"",padding:"",border:"Width"},function(e,t){he.cssHooks[e+t]={expand:function(n){for(var o=0,i={},r="string"==typeof n?n.split(" "):[n];o<4;o++)i[e+qe[o]+t]=r[o]||r[o-2]||r[0];return i}},et.test(e)||(he.cssHooks[e+t].set=O)}),he.fn.extend({css:function(e,t){return Ae(this,function(e,t,n){var o,i,r={},s=0;if(Array.isArray(t)){for(o=nt(e),i=t.length;s<i;s++)r[t[s]]=he.css(e,t[s],!1,o);return r}return void 0!==n?he.style(e,t,n):he.css(e,t)},e,t,arguments.length>1)}}),he.Tween=M,M.prototype={constructor:M,init:function(e,t,n,o,i,r){this.elem=e,this.prop=n,this.easing=i||he.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=o,this.unit=r||(he.cssNumber[n]?"":"px")},cur:function(){var e=M.propHooks[this.prop];return e&&e.get?e.get(this):M.propHooks._default.get(this)},run:function(e){var t,n=M.propHooks[this.prop];return this.options.duration?this.pos=t=he.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):M.propHooks._default.set(this),this}},M.prototype.init.prototype=M.prototype,M.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=he.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){he.fx.step[e.prop]?he.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[he.cssProps[e.prop]]&&!he.cssHooks[e.prop]?e.elem[e.prop]=e.now:he.style(e.elem,e.prop,e.now+e.unit)}}},M.propHooks.scrollTop=M.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},he.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},he.fx=M.prototype.init,he.fx.step={};var lt,ut,ft=/^(?:toggle|show|hide)$/,dt=/queueHooks$/;he.Animation=he.extend(Q,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,Oe.exec(t),n),n}]},tweener:function(e,t){he.isFunction(e)?(t=e,e=["*"]):e=e.match(ke);for(var n,o=0,i=e.length;o<i;o++)n=e[o],Q.tweeners[n]=Q.tweeners[n]||[],Q.tweeners[n].unshift(t)},prefilters:[z],prefilter:function(e,t){t?Q.prefilters.unshift(e):Q.prefilters.push(e)}}),he.speed=function(e,t,n){var o=e&&"object"==typeof e?he.extend({},e):{complete:n||!n&&t||he.isFunction(e)&&e,duration:e,easing:n&&t||t&&!he.isFunction(t)&&t};return he.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in he.fx.speeds?o.duration=he.fx.speeds[o.duration]:o.duration=he.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){he.isFunction(o.old)&&o.old.call(this),o.queue&&he.dequeue(this,o.queue)},o},he.fn.extend({fadeTo:function(e,t,n,o){return this.filter(Re).css("opacity",0).show().end().animate({opacity:t},e,n,o)},animate:function(e,t,n,o){var i=he.isEmptyObject(e),r=he.speed(t,n,o),s=function(){var t=Q(this,he.extend({},e),r);(i||De.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var o=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",r=he.timers,s=De.get(this);if(i)s[i]&&s[i].stop&&o(s[i]);else for(i in s)s[i]&&s[i].stop&&dt.test(i)&&o(s[i])
;for(i=r.length;i--;)r[i].elem!==this||null!=e&&r[i].queue!==e||(r[i].anim.stop(n),t=!1,r.splice(i,1));!t&&n||he.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=De.get(this),o=n[e+"queue"],i=n[e+"queueHooks"],r=he.timers,s=o?o.length:0;for(n.finish=!0,he.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)o[t]&&o[t].finish&&o[t].finish.call(this);delete n.finish})}}),he.each(["toggle","show","hide"],function(e,t){var n=he.fn[t];he.fn[t]=function(e,o,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(W(t,!0),e,o,i)}}),he.each({slideDown:W("show"),slideUp:W("hide"),slideToggle:W("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){he.fn[e]=function(e,n,o){return this.animate(t,e,n,o)}}),he.timers=[],he.fx.tick=function(){var e,t=0,n=he.timers;for(lt=he.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||he.fx.stop(),lt=void 0},he.fx.timer=function(e){he.timers.push(e),he.fx.start()},he.fx.interval=13,he.fx.start=function(){ut||(ut=!0,H())},he.fx.stop=function(){ut=null},he.fx.speeds={slow:600,fast:200,_default:400},he.fn.delay=function(t,n){return t=he.fx?he.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,o){var i=e.setTimeout(n,t);o.stop=function(){e.clearTimeout(i)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select"),n=t.appendChild(ne.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=n.selected,e=ne.createElement("input"),e.value="t",e.type="radio",pe.radioValue="t"===e.value}();var pt,ht=he.expr.attrHandle;he.fn.extend({attr:function(e,t){return Ae(this,he.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){he.removeAttr(this,e)})}}),he.extend({attr:function(e,t,n){var o,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?he.prop(e,t,n):(1===r&&he.isXMLDoc(e)||(i=he.attrHooks[t.toLowerCase()]||(he.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void he.removeAttr(e,t):i&&"set"in i&&void 0!==(o=i.set(e,n,t))?o:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(o=i.get(e,t))?o:(o=he.find.attr(e,t),null==o?void 0:o))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&i(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,o=0,i=t&&t.match(ke);if(i&&1===e.nodeType)for(;n=i[o++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?he.removeAttr(e,n):e.setAttribute(n,n),n}},he.each(he.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ht[t]||he.find.attr;ht[t]=function(e,t,o){var i,r,s=t.toLowerCase();return o||(r=ht[s],ht[s]=i,i=null!=n(e,t,o)?s:null,ht[s]=r),i}});var gt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;he.fn.extend({prop:function(e,t){return Ae(this,he.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[he.propFix[e]||e]})}}),he.extend({prop:function(e,t,n){var o,i,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&he.isXMLDoc(e)||(t=he.propFix[t]||t,i=he.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(o=i.set(e,n,t))?o:e[t]=n:i&&"get"in i&&null!==(o=i.get(e,t))?o:e[t]},propHooks:{tabIndex:{get:function(e){var t=he.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(he.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),he.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){he.propFix[this.toLowerCase()]=this}),he.fn.extend({addClass:function(e){var t,n,o,i,r,s,a,c=0;if(he.isFunction(e))return this.each(function(t){he(this).addClass(e.call(this,t,U(this)))});if("string"==typeof e&&e)for(t=e.match(ke)||[];n=this[c++];)if(i=U(n),o=1===n.nodeType&&" "+Y(i)+" "){for(s=0;r=t[s++];)o.indexOf(" "+r+" ")<0&&(o+=r+" ");a=Y(o),i!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,o,i,r,s,a,c=0;if(he.isFunction(e))return this.each(function(t){he(this).removeClass(e.call(this,t,U(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(ke)||[];n=this[c++];)if(i=U(n),o=1===n.nodeType&&" "+Y(i)+" "){for(s=0;r=t[s++];)for(;o.indexOf(" "+r+" ")>-1;)o=o.replace(" "+r+" "," ");a=Y(o),i!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):he.isFunction(e)?this.each(function(n){he(this).toggleClass(e.call(this,n,U(this),t),t)}):this.each(function(){var t,o,i,r;if("string"===n)for(o=0,i=he(this),r=e.match(ke)||[];t=r[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=U(this),t&&De.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":De.get(this,"__className__")||""))})},hasClass:function(e){var t,n,o=0;for(t=" "+e+" ";n=this[o++];)if(1===n.nodeType&&(" "+Y(U(n))+" ").indexOf(t)>-1)return!0;return!1}}),he.fn.extend({val:function(e){var t,n,o,i=this[0];return arguments.length?(o=he.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=o?e.call(this,n,he(this).val()):e,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=he.map(i,function(e){return null==e?"":e+""})),(t=he.valHooks[this.type]||he.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=he.valHooks[i.type]||he.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(/\r/g,""):null==n?"":n):void 0}}),he.extend({valHooks:{option:{get:function(e){var t=he.find.attr(e,"value");return null!=t?t:Y(he.text(e))}},select:{get:function(e){var t,n,o,r=e.options,s=e.selectedIndex,a="select-one"===e.type,c=a?null:[],l=a?s+1:r.length;for(o=s<0?l:a?s:0;o<l;o++)if(n=r[o],(n.selected||o===s)&&!n.disabled&&(!n.parentNode.disabled||!i(n.parentNode,"optgroup"))){if(t=he(n).val(),a)return t;c.push(t)}return c},set:function(e,t){for(var n,o,i=e.options,r=he.makeArray(t),s=i.length;s--;)o=i[s],(o.selected=he.inArray(he.valHooks.option.get(o),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),he.each(["radio","checkbox"],function(){he.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=he.inArray(he(e).val(),t)>-1}},pe.checkOn||(he.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var yt=/^(?:focusinfocus|focusoutblur)$/;he.extend(he.event,{trigger:function(t,n,o,i){var r,s,a,c,l,u,f,d=[o||ne],p=ue.call(t,"type")?t.type:t,h=ue.call(t,"namespace")?t.namespace.split("."):[];if(s=a=o=o||ne,3!==o.nodeType&&8!==o.nodeType&&!yt.test(p+he.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),l=p.indexOf(":")<0&&"on"+p,t=t[he.expando]?t:new he.Event(p,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=o),n=null==n?[t]:he.makeArray(n,[t]),f=he.event.special[p]||{},i||!f.trigger||!1!==f.trigger.apply(o,n))){if(!i&&!f.noBubble&&!he.isWindow(o)){for(c=f.delegateType||p,yt.test(c+p)||(s=s.parentNode);s;s=s.parentNode)d.push(s),a=s;a===(o.ownerDocument||ne)&&d.push(a.defaultView||a.parentWindow||e)}for(r=0;(s=d[r++])&&!t.isPropagationStopped();)t.type=r>1?c:f.bindType||p,u=(De.get(s,"events")||{})[t.type]&&De.get(s,"handle"),u&&u.apply(s,n),(u=l&&s[l])&&u.apply&&je(s)&&(t.result=u.apply(s,n),!1===t.result&&t.preventDefault());return t.type=p,i||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(d.pop(),n)||!je(o)||l&&he.isFunction(o[p])&&!he.isWindow(o)&&(a=o[l],a&&(o[l]=null),he.event.triggered=p,o[p](),he.event.triggered=void 0,a&&(o[l]=a)),t.result}},simulate:function(e,t,n){var o=he.extend(new he.Event,n,{type:e,isSimulated:!0});he.event.trigger(o,null,t)}}),he.fn.extend({trigger:function(e,t){return this.each(function(){he.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return he.event.trigger(e,t,n,!0)}}),he.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){he.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),he.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||he.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){he.event.simulate(t,e.target,he.event.fix(e))};he.event.special[t]={setup:function(){var o=this.ownerDocument||this,i=De.access(o,t);i||o.addEventListener(e,n,!0),De.access(o,t,(i||0)+1)},teardown:function(){var o=this.ownerDocument||this,i=De.access(o,t)-1;i?De.access(o,t,i):(o.removeEventListener(e,n,!0),De.remove(o,t))}}});var vt=e.location,bt=he.now(),xt=/\?/;he.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||he.error("Invalid XML: "+t),n};var wt=/\[\]$/,Tt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;he.param=function(e,t){var n,o=[],i=function(e,t){var n=he.isFunction(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!he.isPlainObject(e))he.each(e,function(){i(this.name,this.value)});else for(n in e)V(n,e[n],t,i);return o.join("&")},he.fn.extend({serialize:function(){return he.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=he.prop(this,"elements");return e?he.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!he(this).is(":disabled")&&Ct.test(this.nodeName)&&!Tt.test(e)&&(this.checked||!Be.test(e))}).map(function(e,t){var n=he(this).val();return null==n?null:Array.isArray(n)?he.map(n,function(e){return{name:t.name,value:e.replace(/\r?\n/g,"\r\n")}}):{name:t.name,value:n.replace(/\r?\n/g,"\r\n")}}).get()}});var St=/^(.*?):[ \t]*([^\r\n]*)$/gm,$t=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,kt=/^(?:GET|HEAD)$/,Et={},Pt={},At="*/".concat("*"),jt=ne.createElement("a");jt.href=vt.href,he.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:vt.href,type:"GET",isLocal:$t.test(vt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":At,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":he.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?J(J(e,he.ajaxSettings),t):J(he.ajaxSettings,e)},ajaxPrefilter:G(Et),ajaxTransport:G(Pt),ajax:function(t,n){function o(t,n,o,a){var l,d,p,x,w,T=n;u||(u=!0,c&&e.clearTimeout(c),i=void 0,s=a||"",C.readyState=t>0?4:0,l=t>=200&&t<300||304===t,o&&(x=K(h,C,o)),x=ee(h,x,C,l),l?(h.ifModified&&(w=C.getResponseHeader("Last-Modified"),w&&(he.lastModified[r]=w),(w=C.getResponseHeader("etag"))&&(he.etag[r]=w)),204===t||"HEAD"===h.type?T="nocontent":304===t?T="notmodified":(T=x.state,d=x.data,p=x.error,l=!p)):(p=T,!t&&T||(T="error",t<0&&(t=0))),C.status=t,C.statusText=(n||T)+"",l?y.resolveWith(g,[d,T,C]):y.rejectWith(g,[C,T,p]),C.statusCode(b),b=void 0,f&&m.trigger(l?"ajaxSuccess":"ajaxError",[C,h,l?d:p]),v.fireWith(g,[C,T]),f&&(m.trigger("ajaxComplete",[C,h]),--he.active||he.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,r,s,a,c,l,u,f,d,p,h=he.ajaxSetup({},n),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?he(g):he.event,y=he.Deferred(),v=he.Callbacks("once memory"),b=h.statusCode||{},x={},w={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=St.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)C.always(e[C.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||T;return i&&i.abort(t),o(0,t),this}};if(y.promise(C),h.url=((t||h.url||vt.href)+"").replace(/^\/\//,vt.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(ke)||[""],null==h.crossDomain){l=ne.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=jt.protocol+"//"+jt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=he.param(h.data,h.traditional)),Z(Et,h,n,C),u)return C;f=he.event&&h.global,f&&0==he.active++&&he.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!kt.test(h.type),r=h.url.replace(/#.*$/,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(/%20/g,"+")):(p=h.url.slice(r.length),h.data&&(r+=(xt.test(r)?"&":"?")+h.data,delete h.data),!1===h.cache&&(r=r.replace(/([?&])_=[^&]*/,"$1"),p=(xt.test(r)?"&":"?")+"_="+bt+++p),h.url=r+p),h.ifModified&&(he.lastModified[r]&&C.setRequestHeader("If-Modified-Since",he.lastModified[r]),he.etag[r]&&C.setRequestHeader("If-None-Match",he.etag[r])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+At+"; q=0.01":""):h.accepts["*"]);for(d in h.headers)C.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(g,C,h)||u))return C.abort();if(T="abort",v.add(h.complete),C.done(h.success),C.fail(h.error),i=Z(Pt,h,n,C)){if(C.readyState=1,f&&m.trigger("ajaxSend",[C,h]),u)return C;h.async&&h.timeout>0&&(c=e.setTimeout(function(){C.abort("timeout")},h.timeout));try{u=!1,i.send(x,o)}catch(e){if(u)throw e;o(-1,e)}}else o(-1,"No Transport");return C},getJSON:function(e,t,n){return he.get(e,t,n,"json")},getScript:function(e,t){return he.get(e,void 0,t,"script")}}),he.each(["get","post"],function(e,t){he[t]=function(e,n,o,i){return he.isFunction(n)&&(i=i||o,o=n,n=void 0),he.ajax(he.extend({url:e,type:t,dataType:i,data:n,success:o},he.isPlainObject(e)&&e))}}),he._evalUrl=function(e){return he.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},he.fn.extend({wrapAll:function(e){var t;return this[0]&&(he.isFunction(e)&&(e=e.call(this[0])),t=he(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return he.isFunction(e)?this.each(function(t){he(this).wrapInner(e.call(this,t))}):this.each(function(){var t=he(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=he.isFunction(e);return this.each(function(n){he(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){he(this).replaceWith(this.childNodes)}),this}}),he.expr.pseudos.hidden=function(e){return!he.expr.pseudos.visible(e)},he.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},he.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Dt={0:200,1223:204},Nt=he.ajaxSettings.xhr();pe.cors=!!Nt&&"withCredentials"in Nt,pe.ajax=Nt=!!Nt,he.ajaxTransport(function(t){var n,o;if(pe.cors||Nt&&!t.crossDomain)return{send:function(i,r){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)a.setRequestHeader(s,i[s]);n=function(e){return function(){n&&(n=o=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Dt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),o=a.onerror=n("error"),void 0!==a.onabort?a.onabort=o:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&o()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),he.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),he.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return he.globalEval(e),e}}}),he.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),he.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(o,i){t=he("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Lt=[],Ft=/(=)\?(?=&|$)|\?\?/;he.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Lt.pop()||he.expando+"_"+bt++;return this[e]=!0,e}}),he.ajaxPrefilter("json jsonp",function(t,n,o){var i,r,s,a=!1!==t.jsonp&&(Ft.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ft.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=he.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ft,"$1"+i):!1!==t.jsonp&&(t.url+=(xt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||he.error(i+" was not called"),s[0]},t.dataTypes[0]="json",r=e[i],e[i]=function(){s=arguments},o.always(function(){void 0===r?he(e).removeProp(i):e[i]=r,t[i]&&(t.jsonpCallback=n.jsonpCallback,Lt.push(i)),s&&he.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),pe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),he.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var o,i,r;return t||(pe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),o=t.createElement("base"),o.href=ne.location.href,t.head.appendChild(o)):t=ne),i=xe.exec(e),r=!n&&[],i?[t.createElement(i[1])]:(i=x([e],t,r),r&&r.length&&he(r).remove(),he.merge([],i.childNodes))},he.fn.load=function(e,t,n){var o,i,r,s=this,a=e.indexOf(" ");return a>-1&&(o=Y(e.slice(a)),e=e.slice(0,a)),he.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&he.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(o?he("<div>").append(he.parseHTML(e)).find(o):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},he.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){he.fn[t]=function(e){return this.on(t,e)}}),he.expr.pseudos.animated=function(e){return he.grep(he.timers,function(t){return e===t.elem}).length},he.offset={setOffset:function(e,t,n){var o,i,r,s,a,c,l,u=he.css(e,"position"),f=he(e),d={};"static"===u&&(e.style.position="relative"),a=f.offset(),r=he.css(e,"top"),c=he.css(e,"left"),l=("absolute"===u||"fixed"===u)&&(r+c).indexOf("auto")>-1,l?(o=f.position(),s=o.top,i=o.left):(s=parseFloat(r)||0,i=parseFloat(c)||0),he.isFunction(t)&&(t=t.call(e,n,he.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+i),"using"in t?t.using.call(e,d):f.css(d)}},he.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){he.offset.setOffset(this,e,t)});var t,n,o,i,r=this[0];return r?r.getClientRects().length?(o=r.getBoundingClientRect(),t=r.ownerDocument,n=t.documentElement,i=t.defaultView,{top:o.top+i.pageYOffset-n.clientTop,left:o.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n=this[0],o={top:0,left:0};return"fixed"===he.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),i(e[0],"html")||(o=e.offset()),o={top:o.top+he.css(e[0],"borderTopWidth",!0),left:o.left+he.css(e[0],"borderLeftWidth",!0)}),{top:t.top-o.top-he.css(n,"marginTop",!0),left:t.left-o.left-he.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===he.css(e,"position");)e=e.offsetParent;return e||Qe})}}),he.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;he.fn[e]=function(o){return Ae(this,function(e,o,i){var r;if(he.isWindow(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===i)return r?r[t]:e[o];r?r.scrollTo(n?r.pageXOffset:i,n?i:r.pageYOffset):e[o]=i},e,o,arguments.length)}}),he.each(["top","left"],function(e,t){he.cssHooks[t]=L(pe.pixelPosition,function(e,n){if(n)return n=N(e,t),tt.test(n)?he(e).position()[t]+"px":n})}),he.each({Height:"height",Width:"width"},function(e,t){he.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,o){he.fn[o]=function(i,r){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===r?"margin":"border");return Ae(this,function(t,n,i){var r;return he.isWindow(t)?0===o.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?he.css(t,n,a):he.style(t,n,i,a)},t,s?i:void 0,s)}})}),he.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,o){return this.on(t,e,n,o)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),he.holdReady=function(e){e?he.readyWait++:he.ready(!0)},he.isArray=Array.isArray,he.parseJSON=JSON.parse,he.nodeName=i,"function"==typeof define&&define.amd&&define("jquery",[],function(){return he});var It=e.jQuery,Ot=e.$;return he.noConflict=function(t){return e.$===he&&(e.$=Ot),t&&e.jQuery===he&&(e.jQuery=It),he},t||(e.jQuery=e.$=he),he}),function(e,t){"use strict";function n(n){var o=t.console;i[n]||(i[n]=!0,e.migrateWarnings.push(n),o&&o.warn&&!e.migrateMute&&(o.warn("JQMIGRATE: "+n),e.migrateTrace&&o.trace&&o.trace()))}function o(e,t,o,i){Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){return n(i),o}})}e.migrateVersion="3.0.0",function(){var n=t.console&&t.console.log&&function(){t.console.log.apply(t.console,arguments)},o=/^[12]\./;n&&(e&&!o.test(e.fn.jquery)||n("JQMIGRATE: jQuery 3.0.0+ REQUIRED"),e.migrateWarnings&&n("JQMIGRATE: Migrate plugin loaded multiple times"),n("JQMIGRATE: Migrate is installed"+(e.migrateMute?"":" with logging active")+", version "+e.migrateVersion))}();var i={};e.migrateWarnings=[],void 0===e.migrateTrace&&(e.migrateTrace=!0),e.migrateReset=function(){i={},e.migrateWarnings.length=0},"BackCompat"===document.compatMode&&n("jQuery is not compatible with Quirks Mode");var r=e.fn.init,s=e.isNumeric,a=e.find,c=/\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/;e.fn.init=function(e){var t=Array.prototype.slice.call(arguments);return"string"==typeof e&&"#"===e&&(n("jQuery( '#' ) is not a valid selector"),t[0]=[]),r.apply(this,t)},e.fn.init.prototype=e.fn,e.find=function(e){var t=Array.prototype.slice.call(arguments);if("string"==typeof e&&c.test(e))try{document.querySelector(e)}catch(o){e=e.replace(/\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/g,function(e,t,n,o){return"["+t+n+'"'+o+'"]'});try{document.querySelector(e),n("Attribute selector with '#' must be quoted: "+t[0]),t[0]=e}catch(e){n("Attribute selector with '#' was not fixed: "+t[0])}}return a.apply(this,t)};var l;for(l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e.find[l]=a[l]);e.fn.size=function(){return n("jQuery.fn.size() is deprecated; use the .length property"),this.length},e.parseJSON=function(){return n("jQuery.parseJSON is deprecated; use JSON.parse"),JSON.parse.apply(null,arguments)},e.isNumeric=function(t){var o=s(t),i=function(t){var n=t&&t.toString();return!e.isArray(t)&&n-parseFloat(n)+1>=0}(t);return o!==i&&n("jQuery.isNumeric() should not be called on constructed objects"),i},o(e,"unique",e.uniqueSort,"jQuery.unique is deprecated, use jQuery.uniqueSort"),o(e.expr,"filters",e.expr.pseudos,"jQuery.expr.filters is now jQuery.expr.pseudos"),o(e.expr,":",e.expr.pseudos,'jQuery.expr[":"] is now jQuery.expr.pseudos');var u=e.ajax;e.ajax=function(){var e=u.apply(this,arguments);return e.promise&&(o(e,"success",e.done,"jQXHR.success is deprecated and removed"),o(e,"error",e.fail,"jQXHR.error is deprecated and removed"),o(e,"complete",e.always,"jQXHR.complete is deprecated and removed")),e};var f=e.fn.removeAttr,d=e.fn.toggleClass;e.fn.removeAttr=function(t){var o=this;return e.each(t.match(/\S+/g),function(t,i){e.expr.match.bool.test(i)&&(n("jQuery.fn.removeAttr no longer sets boolean properties: "+i),o.prop(i,!1))}),f.apply(this,arguments)},e.fn.toggleClass=function(t){return void 0!==t&&"boolean"!=typeof t?d.apply(this,arguments):(n("jQuery.fn.toggleClass( boolean ) is deprecated"),this.each(function(){var n=this.getAttribute&&this.getAttribute("class")||"";n&&e.data(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===t?"":e.data(this,"__className__")||"")}))};var p=!1;e.swap&&e.each(["height","width","reliableMarginRight"],function(t,n){var o=e.cssHooks[n]&&e.cssHooks[n].get;o&&(e.cssHooks[n].get=function(){var e;return p=!0,e=o.apply(this,arguments),p=!1,e})}),e.swap=function(e,t,o,i){var r,s,a={};p||n("jQuery.swap() is undocumented and deprecated");for(s in t)a[s]=e.style[s],e.style[s]=t[s];r=o.apply(e,i||[]);for(s in t)e.style[s]=a[s];return r};var h=e.data;e.data=function(t,o,i){var r;return o&&o!==e.camelCase(o)&&(r=e.hasData(t)&&h.call(this,t))&&o in r?(n("jQuery.data() always sets/gets camelCased names: "+o),arguments.length>2&&(r[o]=i),r[o]):h.apply(this,arguments)};var g=e.Tween.prototype.run;e.Tween.prototype.run=function(t){e.easing[this.easing].length>1&&(n('easing function "jQuery.easing.'+this.easing.toString()+'" should use only first argument'),e.easing[this.easing]=e.easing[this.easing].bind(e.easing,t,this.options.duration*t,0,1,this.options.duration)),g.apply(this,arguments)};var m=e.fn.load,y=e.event.fix;e.event.props=[],e.event.fixHooks={},e.event.fix=function(t){var o,i=t.type,r=this.fixHooks[i],s=e.event.props;if(s.length)for(n("jQuery.event.props are deprecated and removed: "+s.join());s.length;)e.event.addProp(s.pop());if(r&&!r._migrated_&&(r._migrated_=!0,n("jQuery.event.fixHooks are deprecated and removed: "+i),(s=r.props)&&s.length))for(;s.length;)e.event.addProp(s.pop());return o=y.call(this,t),r&&r.filter?r.filter(o,t):o},e.each(["load","unload","error"],function(t,o){e.fn[o]=function(){var e=Array.prototype.slice.call(arguments,0);return"load"===o&&"string"==typeof e[0]?m.apply(this,e):(n("jQuery.fn."+o+"() is deprecated"),e.splice(0,0,o),arguments.length?this.on.apply(this,e):(this.triggerHandler.apply(this,e),this))}}),e(function(){e(document).triggerHandler("ready")}),e.event.special.ready={setup:function(){this===document&&n("'ready' event is deprecated")}},e.fn.extend({bind:function(e,t,o){return n("jQuery.fn.bind() is deprecated"),this.on(e,null,t,o)},unbind:function(e,t){return n("jQuery.fn.unbind() is deprecated"),this.off(e,null,t)},delegate:function(e,t,o,i){return n("jQuery.fn.delegate() is deprecated"),this.on(t,e,o,i)},undelegate:function(e,t,o){return n("jQuery.fn.undelegate() is deprecated"),1===arguments.length?this.off(e,"**"):this.off(t,e||"**",o)}});var v=e.fn.offset;e.fn.offset=function(){var t,o=this[0],i={top:0,left:0};return o&&o.nodeType?(t=(o.ownerDocument||document).documentElement,e.contains(t,o)?v.apply(this,arguments):(n("jQuery.fn.offset() requires an element connected to a document"),i)):(n("jQuery.fn.offset() requires a valid DOM element"),i)};var b=e.param;e.param=function(t,o){var i=e.ajaxSettings&&e.ajaxSettings.traditional;return void 0===o&&i&&(n("jQuery.param() no longer uses jQuery.ajaxSettings.traditional"),o=i),b.call(this,t,o)};var x=e.fn.andSelf||e.fn.addBack;e.fn.andSelf=function(){return n("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"),x.apply(this,arguments)};var w=e.Deferred,T=[["resolve","done",e.Callbacks("once memory"),e.Callbacks("once memory"),"resolved"],["reject","fail",e.Callbacks("once memory"),e.Callbacks("once memory"),"rejected"],["notify","progress",e.Callbacks("memory"),e.Callbacks("memory")]];e.Deferred=function(t){var o=w(),i=o.promise();return o.pipe=i.pipe=function(){var t=arguments;return n("deferred.pipe() is deprecated"),e.Deferred(function(n){e.each(T,function(r,s){var a=e.isFunction(t[r])&&t[r];o[s[1]](function(){var t=a&&a.apply(this,arguments);t&&e.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s[0]+"With"](this===i?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},t&&t.call(o,o),o}}(jQuery,window),function(e){"use strict";function t(t){var n,o=t.attr("data-target")||(n=t.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return e(o)}function n(t){return this.each(function(){var n=e(this),i=n.data("bs.collapse"),r=e.extend({},o.DEFAULTS,n.data(),"object"==typeof t&&t);!i&&r.toggle&&/show|hide/.test(t)&&(r.toggle=!1),i||n.data("bs.collapse",i=new o(this,r)),"string"==typeof t&&i[t]()})}var o=function(t,n){this.$element=e(t),this.options=e.extend({},o.DEFAULTS,n),this.$trigger=e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.7",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(t=i.data("bs.collapse"))&&t.transitioning)){var r=e.Event("show.bs.collapse");if(this.$element.trigger(r),!r.isDefaultPrevented()){i&&i.length&&(n.call(i,"hide"),t||i.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return a.call(this);var c=e.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",e.proxy(a,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[s](this.$element[0][c])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=e.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,
this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!e.support.transition)return i.call(this);this.$element[n](0).one("bsTransitionEnd",e.proxy(i,this)).emulateTransitionEnd(o.TRANSITION_DURATION)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return e(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(e.proxy(function(n,o){var i=e(o);this.addAriaAndCollapsedClass(t(i),i)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(e,t){var n=e.hasClass("in");e.attr("aria-expanded",n),t.toggleClass("collapsed",!n).attr("aria-expanded",n)};var i=e.fn.collapse;e.fn.collapse=n,e.fn.collapse.Constructor=o,e.fn.collapse.noConflict=function(){return e.fn.collapse=i,this},e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var i=e(this);i.attr("data-target")||o.preventDefault();var r=t(i),s=r.data("bs.collapse"),a=s?"toggle":i.data();n.call(r,a)})}(jQuery),function(e){"use strict";function t(t,o){return this.each(function(){var i=e(this),r=i.data("bs.modal"),s=e.extend({},n.DEFAULTS,i.data(),"object"==typeof t&&t);r||i.data("bs.modal",r=new n(this,s)),"string"==typeof t?r[t](o):s.show&&r.show(o)})}var n=function(t,n){this.options=n,this.$body=e(document.body),this.$element=e(t),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)},n.prototype.show=function(t){var o=this,i=e.Event("show.bs.modal",{relatedTarget:t});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(t){e(t.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var i=e.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),i&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var r=e.Event("shown.bs.modal",{relatedTarget:t});i?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(r)}).emulateTransitionEnd(n.TRANSITION_DURATION):o.$element.trigger("focus").trigger(r)}))},n.prototype.hide=function(t){t&&t.preventDefault(),t=e.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),e(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){document===e.target||this.$element[0]===e.target||this.$element.has(e.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",e.proxy(function(e){27==e.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?e(window).on("resize.bs.modal",e.proxy(this.handleUpdate,this)):e(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var e=this;this.$element.hide(),this.backdrop(function(){e.$body.removeClass("modal-open"),e.resetAdjustments(),e.resetScrollbar(),e.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(t){var o=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var r=e.support.transition&&i;if(this.$backdrop=e(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){if(this.ignoreBackdropClick)return void(this.ignoreBackdropClick=!1);e.target===e.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),r&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;r?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):t()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){o.removeBackdrop(),t&&t()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):s()}else t&&t()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var e=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&e?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!e?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var e=window.innerWidth;if(!e){var t=document.documentElement.getBoundingClientRect();e=t.right-Math.abs(t.left)}this.bodyIsOverflowing=document.body.clientWidth<e,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",e+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",this.$body.append(e);var t=e.offsetWidth-e.clientWidth;return this.$body[0].removeChild(e),t};var o=e.fn.modal;e.fn.modal=t,e.fn.modal.Constructor=n,e.fn.modal.noConflict=function(){return e.fn.modal=o,this},e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var o=e(this),i=o.attr("href"),r=e(o.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),s=r.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(i)&&i},r.data(),o.data());o.is("a")&&n.preventDefault(),r.one("show.bs.modal",function(e){e.isDefaultPrevented()||r.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),t.call(r,s,this)})}(jQuery),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==typeof exports?require("jquery"):jQuery)}(function(e){var t,n=navigator.userAgent,o=/iphone/i.test(n),i=/chrome/i.test(n),r=/android/i.test(n);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(n,s){var a,c,l,u,f,d,p,h;if(!n&&this.length>0){a=e(this[0]);var g=a.data(e.mask.dataName);return g?g():void 0}return s=e.extend({autoclear:e.mask.autoclear,placeholder:e.mask.placeholder,completed:null},s),c=e.mask.definitions,l=[],u=p=n.length,f=null,e.each(n.split(""),function(e,t){"?"==t?(p--,u=e):c[t]?(l.push(new RegExp(c[t])),null===f&&(f=l.length-1),u>e&&(d=l.length-1)):l.push(null)}),this.trigger("unmask").each(function(){function a(){if(s.completed){for(var e=f;d>=e;e++)if(l[e]&&P[e]===g(e))return;s.completed.call(E)}}function g(e){return s.placeholder.charAt(e<s.placeholder.length?e:0)}function m(e){for(;++e<p&&!l[e];);return e}function y(e){for(;--e>=0&&!l[e];);return e}function v(e,t){var n,o;if(!(0>e)){for(n=e,o=m(t);p>n;n++)if(l[n]){if(!(p>o&&l[n].test(P[o])))break;P[n]=P[o],P[o]=g(o),o=m(o)}$(),E.caret(Math.max(f,e))}}function b(e){var t,n,o,i;for(t=e,n=g(e);p>t;t++)if(l[t]){if(o=m(t),i=P[t],P[t]=n,!(p>o&&l[o].test(i)))break;n=i}}function x(){var e=E.val(),t=E.caret();if(h&&h.length&&h.length>e.length){for(k(!0);t.begin>0&&!l[t.begin-1];)t.begin--;if(0===t.begin)for(;t.begin<f&&!l[t.begin];)t.begin++;E.caret(t.begin,t.begin)}else{for(k(!0);t.begin<p&&!l[t.begin];)t.begin++;E.caret(t.begin,t.begin)}a()}function w(){k(),E.val()!=j&&E.change()}function T(e){if(!E.prop("readonly")){var t,n,i,r=e.which||e.keyCode;h=E.val(),8===r||46===r||o&&127===r?(t=E.caret(),n=t.begin,i=t.end,i-n==0&&(n=46!==r?y(n):i=m(n-1),i=46===r?m(i):i),S(n,i),v(n,i-1),e.preventDefault()):13===r?w.call(this,e):27===r&&(E.val(j),E.caret(0,k()),e.preventDefault())}}function C(t){if(!E.prop("readonly")){var n,o,i,s=t.which||t.keyCode,c=E.caret();if(!(t.ctrlKey||t.altKey||t.metaKey||32>s)&&s&&13!==s){if(c.end-c.begin!=0&&(S(c.begin,c.end),v(c.begin,c.end-1)),n=m(c.begin-1),p>n&&(o=String.fromCharCode(s),l[n].test(o))){if(b(n),P[n]=o,$(),i=m(n),r){var u=function(){e.proxy(e.fn.caret,E,i)()};setTimeout(u,0)}else E.caret(i);c.begin<=d&&a()}t.preventDefault()}}}function S(e,t){var n;for(n=e;t>n&&p>n;n++)l[n]&&(P[n]=g(n))}function $(){E.val(P.join(""))}function k(e){var t,n,o,i=E.val(),r=-1;for(t=0,o=0;p>t;t++)if(l[t]){for(P[t]=g(t);o++<i.length;)if(n=i.charAt(o-1),l[t].test(n)){P[t]=n,r=t;break}if(o>i.length){S(t+1,p);break}}else P[t]===i.charAt(o)&&o++,u>t&&(r=t);return e?$():u>r+1?s.autoclear||P.join("")===A?(E.val()&&E.val(""),S(0,p)):$():($(),E.val(E.val().substring(0,r+1))),u?t:f}var E=e(this),P=e.map(n.split(""),function(e,t){return"?"!=e?c[e]?g(t):e:void 0}),A=P.join(""),j=E.val();E.data(e.mask.dataName,function(){return e.map(P,function(e,t){return l[t]&&e!=g(t)?e:null}).join("")}),E.one("unmask",function(){E.off(".mask").removeData(e.mask.dataName)}).on("focus.mask",function(){if(!E.prop("readonly")){clearTimeout(t);var e;j=E.val(),e=k(),t=setTimeout(function(){E.get(0)===document.activeElement&&($(),e==n.replace("?","").length?E.caret(0,e):E.caret(e))},10)}}).on("blur.mask",w).on("keydown.mask",T).on("keypress.mask",C).on("input.mask paste.mask",function(){E.prop("readonly")||setTimeout(function(){var e=k(!0);E.caret(e),a()},0)}),i&&r&&E.off("input.mask").on("input.mask",x),k()})}})}),function(e,t){"function"==typeof define&&define.amd?define([],function(){return t()}):"object"==typeof exports?module.exports=t():e.Headhesive=t()}(this,function(){"use strict";var e=function(t,n){for(var o in n)n.hasOwnProperty(o)&&(t[o]="object"==typeof n[o]?e(t[o],n[o]):n[o]);return t},t=function(e,t){var n,o,i,r=Date.now||function(){return(new Date).getTime()},s=null,a=0,c=function(){a=r(),s=null,i=e.apply(n,o),n=o=null};return function(){var l=r(),u=t-(l-a);return n=this,o=arguments,u<=0?(clearTimeout(s),s=null,a=l,i=e.apply(n,o),n=o=null):s||(s=setTimeout(c,u)),i}},n=function(){return void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop},o=function(e,t){for(var n=0,o=e.offsetHeight;e;)n+=e.offsetTop,e=e.offsetParent;return"bottom"===t&&(n+=o),n},i=function(t,n){"querySelector"in document&&"addEventListener"in window&&(this.visible=!1,this.options={offset:300,offsetSide:"top",classes:{clone:"headhesive",stick:"headhesive--stick",unstick:"headhesive--unstick"},throttle:250,onInit:function(){},onStick:function(){},onUnstick:function(){},onDestroy:function(){}},this.elem="string"==typeof t?document.querySelector(t):t,this.options=e(this.options,n),this.init())};return i.prototype={constructor:i,init:function(){if(this.clonedElem=this.elem.cloneNode(!0),this.clonedElem.className+=" "+this.options.classes.clone,document.body.insertBefore(this.clonedElem,document.body.firstChild),"number"==typeof this.options.offset)this.scrollOffset=this.options.offset;else{if("string"!=typeof this.options.offset)throw new Error("Invalid offset: "+this.options.offset);this._setScrollOffset()}this._throttleUpdate=t(this.update.bind(this),this.options.throttle),this._throttleScrollOffset=t(this._setScrollOffset.bind(this),this.options.throttle),window.addEventListener("scroll",this._throttleUpdate,!1),window.addEventListener("resize",this._throttleScrollOffset,!1),this.options.onInit.call(this)},_setScrollOffset:function(){"string"==typeof this.options.offset&&(this.scrollOffset=o(document.querySelector(this.options.offset),this.options.offsetSide))},destroy:function(){document.body.removeChild(this.clonedElem),window.removeEventListener("scroll",this._throttleUpdate),window.removeEventListener("resize",this._throttleScrollOffset),this.options.onDestroy.call(this)},stick:function(){this.visible||(this.clonedElem.className=this.clonedElem.className.replace(new RegExp("(^|\\s)*"+this.options.classes.unstick+"(\\s|$)*","g"),""),this.clonedElem.className+=" "+this.options.classes.stick,this.visible=!0,this.options.onStick.call(this))},unstick:function(){this.visible&&(this.clonedElem.className=this.clonedElem.className.replace(new RegExp("(^|\\s)*"+this.options.classes.stick+"(\\s|$)*","g"),""),this.clonedElem.className+=" "+this.options.classes.unstick,this.visible=!1,this.options.onUnstick.call(this))},update:function(){n()>this.scrollOffset?this.stick():this.unstick()}},i}),function(e,t,n,o){"use strict";function i(e){var t=e.currentTarget,o=e.data?e.data.options:{},i=o.selector?n(o.selector):e.data?e.data.items:[],r=n(t).attr("data-fancybox")||"",s=0,a=n.fancybox.getInstance();e.preventDefault(),e.stopPropagation(),a&&a.current.opts.$orig.is(t)||(r?(i=i.length?i.filter('[data-fancybox="'+r+'"]'):n('[data-fancybox="'+r+'"]'),(s=i.index(t))<0&&(s=0)):i=[t],n.fancybox.open(i,o,s))}if(n){if(n.fn.fancybox)return void n.error("fancyBox already initialized");var r={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!1,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","close"],idleTime:4,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><button data-fancybox-prev title="{{PREV}}" class="fancybox-button fancybox-button--left"></button><div class="fancybox-infobar__body"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><button data-fancybox-next title="{{NEXT}}" class="fancybox-button fancybox-button--right"></button></div><div class="fancybox-toolbar">{{BUTTONS}}</div><div class="fancybox-navigation"><button data-fancybox-prev title="{{PREV}}" class="fancybox-arrow fancybox-arrow--left" /><button data-fancybox-next title="{{NEXT}}" class="fancybox-arrow fancybox-arrow--right" /></div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"></button>',fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"></button>',thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>'},parentEl:"body",autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0},onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder"}}},s=n(e),a=n(t),c=0,l=function(e){return e&&e.hasOwnProperty&&e instanceof n},u=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),f=function(){var e,n=t.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(n.style[e]!==o)return i[e]}(),d=function(e){return e&&e.length&&e[0].offsetHeight},p=function(e,o,i){var s=this;s.opts=n.extend(!0,{index:i},r,o||{}),o&&n.isArray(o.buttons)&&(s.opts.buttons=o.buttons),s.id=s.opts.id||++c,s.group=[],s.currIndex=parseInt(s.opts.index,10)||0,s.prevIndex=null,s.prevPos=null,s.currPos=0,s.firstRun=null,s.createGroup(e),s.group.length&&(s.$lastFocus=n(t.activeElement).blur(),s.slides={},s.init(e))};n.extend(p.prototype,{init:function(){var e,t,o,i=this,r=i.group[i.currIndex].opts;i.scrollTop=a.scrollTop(),i.scrollLeft=a.scrollLeft(),n.fancybox.getInstance()||n.fancybox.isMobile||"hidden"===n("body").css("overflow")||(e=n("body").width(),n("html").addClass("fancybox-enabled"),(e=n("body").width()-e)>1&&n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar, .fancybox-enabled body { margin-right: '+e+"px; }</style>")),o="",n.each(r.buttons,function(e,t){o+=r.btnTpl[t]||""}),t=n(i.translate(i,r.baseTpl.replace("{{BUTTONS}}",o))).addClass("fancybox-is-hidden").attr("id","fancybox-container-"+i.id).addClass(r.baseClass).data("FancyBox",i).prependTo(r.parentEl),i.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption"].forEach(function(e){i.$refs[e]=t.find(".fancybox-"+e)}),(!r.arrows||i.group.length<2)&&t.find(".fancybox-navigation").remove(),r.infobar||i.$refs.infobar.remove(),r.toolbar||i.$refs.toolbar.remove(),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var i=n[t];return i===o?e:i})},createGroup:function(e){var t=this,i=n.makeArray(e);n.each(i,function(e,i){var r,s,a,c,l={},u={},f=[];n.isPlainObject(i)?(l=i,u=i.opts||i):"object"===n.type(i)&&n(i).length?(r=n(i),f=r.data(),u="options"in f?f.options:{},u="object"===n.type(u)?u:{},l.src="src"in f?f.src:u.src||r.attr("href"),["width","height","thumb","type","filter"].forEach(function(e){e in f&&(u[e]=f[e])}),"srcset"in f&&(u.image={srcset:f.srcset}),u.$orig=r,l.type||l.src||(l.type="inline",l.src=i)):l={type:"html",src:i+""},l.opts=n.extend(!0,{},t.opts,u),n.fancybox.isMobile&&(l.opts=n.extend(!0,{},l.opts,l.opts.mobile)),s=l.type||l.opts.type,a=l.src||"",!s&&a&&(a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?s="image":a.match(/\.(pdf)((\?|#).*)?$/i)?s="pdf":"#"===a.charAt(0)&&(s="inline")),l.type=s,l.index=t.group.length,l.opts.$orig&&!l.opts.$orig.length&&delete l.opts.$orig,!l.opts.$thumb&&l.opts.$orig&&(l.opts.$thumb=l.opts.$orig.find("img:first")),l.opts.$thumb&&!l.opts.$thumb.length&&delete l.opts.$thumb,"function"===n.type(l.opts.caption)?l.opts.caption=l.opts.caption.apply(i,[t,l]):"caption"in f&&(l.opts.caption=f.caption),l.opts.caption=l.opts.caption===o?"":l.opts.caption+"","ajax"===s&&(c=a.split(/\s+/,2),c.length>1&&(l.src=c.shift(),l.opts.filter=c.shift())),"auto"==l.opts.smallBtn&&(n.inArray(s,["html","inline","ajax"])>-1?(l.opts.toolbar=!1,l.opts.smallBtn=!0):l.opts.smallBtn=!1),"pdf"===s&&(l.type="iframe",l.opts.iframe.preload=!1),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),t.group.push(l)})},addEvents:function(){var o=this;o.removeEvents(),o.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),o.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),o.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),o.next()}),s.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?u(function(){o.update()}):(o.$refs.stage.hide(),setTimeout(function(){o.$refs.stage.show(),o.update()},500))}),a.on("focusin.fb",function(e){var i=n.fancybox?n.fancybox.getInstance():null;i.isClosing||!i.current||!i.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||i&&"fixed"!==n(e.target).css("position")&&!i.$refs.container.has(e.target).length&&(e.stopPropagation(),i.focus(),s.scrollTop(o.scrollTop).scrollLeft(o.scrollLeft))}),a.on("keydown.fb",function(e){var t=o.current,i=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea"))return 8===i||27===i?(e.preventDefault(),void o.close(e)):37===i||38===i?(e.preventDefault(),void o.previous()):39===i||40===i?(e.preventDefault(),void o.next()):void o.trigger("afterKeydown",e,i)}),o.group[o.currIndex].opts.idleTime&&(o.idleSecondsCounter=0,a.on("mousemove.fb-idle mouseenter.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(){o.idleSecondsCounter=0,o.isIdle&&o.showControls(),o.isIdle=!1}),o.idleInterval=e.setInterval(function(){++o.idleSecondsCounter>=o.group[o.currIndex].opts.idleTime&&(o.isIdle=!0,o.idleSecondsCounter=0,o.hideControls())},1e3))},removeEvents:function(){var t=this;s.off("orientationchange.fb resize.fb"),a.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),t.idleInterval&&(e.clearInterval(t.idleInterval),t.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t,i){var r,s,a,c,l,u,f,p=this,h=p.group.length;if(!(p.isSliding||p.isClosing||p.isAnimating&&p.firstRun)){if(e=parseInt(e,10),!(s=p.current?p.current.opts.loop:p.opts.loop)&&(e<0||e>=h))return!1;if(r=p.firstRun=null===p.firstRun,!(h<2&&!r&&p.isSliding)){if(c=p.current,p.prevIndex=p.currIndex,p.prevPos=p.currPos,a=p.createSlide(e),h>1&&((s||a.index>0)&&p.createSlide(e-1),(s||a.index<h-1)&&p.createSlide(e+1)),p.current=a,p.currIndex=a.index,p.currPos=a.pos,p.trigger("beforeShow",r),p.updateControls(),u=n.fancybox.getTranslate(a.$slide),a.isMoved=(0!==u.left||0!==u.top)&&!a.$slide.hasClass("fancybox-animated"),a.forcedDuration=o,n.isNumeric(t)?a.forcedDuration=t:t=a.opts[r?"animationDuration":"transitionDuration"],t=parseInt(t,10),r)return a.opts.animationEffect&&t&&p.$refs.container.css("transition-duration",t+"ms"),p.$refs.container.removeClass("fancybox-is-hidden"),d(p.$refs.container),p.$refs.container.addClass("fancybox-is-open"),a.$slide.addClass("fancybox-slide--current"),p.loadSlide(a),void p.preload();n.each(p.slides,function(e,t){n.fancybox.stop(t.$slide)}),a.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),a.isMoved?(l=Math.round(a.$slide.width()),n.each(p.slides,function(e,o){var i=o.pos-a.pos;n.fancybox.animate(o.$slide,{top:0,left:i*l+i*o.opts.gutter},t,function(){o.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),o.pos===p.currPos&&(a.isMoved=!1,p.complete())})})):p.$refs.stage.children().removeAttr("style"),a.isLoaded?p.revealContent(a):p.loadSlide(a),p.preload(),c.pos!==a.pos&&(f="fancybox-slide--"+(c.pos>a.pos?"next":"previous"),c.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),c.isComplete=!1,t&&(a.isMoved||a.opts.transitionEffect)&&(a.isMoved?c.$slide.addClass(f):(f="fancybox-animated "+f+" fancybox-fx-"+a.opts.transitionEffect,n.fancybox.animate(c.$slide,f,t,function(){c.$slide.removeClass(f).removeAttr("style")}))))}}},createSlide:function(e){var t,o,i=this;return o=e%i.group.length,o=o<0?i.group.length+o:o,!i.slides[e]&&i.group[o]&&(t=n('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[e]=n.extend(!0,{},i.group[o],{pos:e,$slide:t,isLoaded:!1}),i.updateSlide(i.slides[e])),i.slides[e]},scaleToActual:function(e,t,i){var r,s,a,c,l,u=this,f=u.current,d=f.$content,p=parseInt(f.$slide.width(),10),h=parseInt(f.$slide.height(),10),g=f.width,m=f.height;"image"!=f.type||f.hasError||!d||u.isAnimating||(n.fancybox.stop(d),u.isAnimating=!0,e=e===o?.5*p:e,t=t===o?.5*h:t,r=n.fancybox.getTranslate(d),c=g/r.width,l=m/r.height,s=.5*p-.5*g,a=.5*h-.5*m,g>p&&(s=r.left*c-(e*c-e),s>0&&(s=0),s<p-g&&(s=p-g)),m>h&&(a=r.top*l-(t*l-t),a>0&&(a=0),a<h-m&&(a=h-m)),u.updateCursor(g,m),n.fancybox.animate(d,{top:a,left:s,scaleX:c,scaleY:l},i||330,function(){u.isAnimating=!1}),u.SlideShow&&u.SlideShow.isActive&&u.SlideShow.stop())},scaleToFit:function(e){var t,o=this,i=o.current,r=i.$content;"image"!=i.type||i.hasError||!r||o.isAnimating||(n.fancybox.stop(r),o.isAnimating=!0,t=o.getFitPos(i),o.updateCursor(t.width,t.height),n.fancybox.animate(r,{top:t.top,left:t.left,scaleX:t.width/r.width(),scaleY:t.height/r.height()},e||330,function(){o.isAnimating=!1}))},getFitPos:function(e){var t,o,i,r,a,c=this,l=e.$content,u=e.width,f=e.height,d=e.opts.margin;return!(!l||!l.length||!u&&!f)&&("number"===n.type(d)&&(d=[d,d]),2==d.length&&(d=[d[0],d[1],d[0],d[1]]),s.width()<800&&(d=[0,0,0,0]),t=parseInt(c.$refs.stage.width(),10)-(d[1]+d[3]),o=parseInt(c.$refs.stage.height(),10)-(d[0]+d[2]),i=Math.min(1,t/u,o/f),r=Math.floor(i*u),a=Math.floor(i*f),{top:Math.floor(.5*(o-a))+d[0],left:Math.floor(.5*(t-r))+d[3],width:r,height:a})},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e){var t=this,o=e.$content;o&&(e.width||e.height)&&(n.fancybox.stop(o),n.fancybox.setTranslate(o,t.getFitPos(e)),e.pos===t.currPos&&t.updateCursor()),e.$slide.trigger("refresh"),t.trigger("onUpdate",e)},updateCursor:function(e,t){var n,i=this,r=i.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");i.current&&!i.isClosing&&(i.isZoomable()?(r.addClass("fancybox-is-zoomable"),n=e!==o&&t!==o?e<i.current.width&&t<i.current.height:i.isScaledDown(),n?r.addClass("fancybox-can-zoomIn"):i.current.opts.touch?r.addClass("fancybox-can-drag"):r.addClass("fancybox-can-zoomOut")):i.current.opts.touch&&r.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this,o=t.current;if(o&&!t.isClosing)return!!("image"===o.type&&o.isLoaded&&!o.hasError&&("zoom"===o.opts.clickContent||n.isFunction(o.opts.clickContent)&&"zoom"===o.opts.clickContent(o))&&(e=t.getFitPos(o),o.width>e.width||o.height>e.height))},isScaledDown:function(){var e=this,t=e.current,o=t.$content,i=!1;return o&&(i=n.fancybox.getTranslate(o),i=i.width<t.width||i.height<t.height),i},canPan:function(){var e=this,t=e.current,n=t.$content,o=!1;return n&&(o=e.getFitPos(t),o=Math.abs(n.width()-o.width)>1||Math.abs(n.height()-o.height)>1),o},loadSlide:function(e){var t,o,i,r=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,r.trigger("beforeLoad",e),t=e.type,o=e.$slide,o.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":r.setImage(e);break;case"iframe":r.setIframe(e);break;case"html":r.setContent(e,e.src||e.content);break;case"inline":n(e.src).length?r.setContent(e,n(e.src)):r.setError(e);break;case"ajax":r.showLoading(e),i=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&r.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&r.setError(e)}})),o.one("onReset",function(){i.abort()});break;default:r.setError(e)}return!0}},setImage:function(t){var o,i,r,s,a=this,c=t.opts.image.srcset;if(c){r=e.devicePixelRatio||1,s=e.innerWidth*r,i=c.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var o=parseInt(e.substring(0,e.length-1),10);return 0===n?t.url=e:void(o&&(t.value=o,t.postfix=e[e.length-1]))}),t}),i.sort(function(e,t){return e.value-t.value});for(var l=0;l<i.length;l++){var u=i[l];if("w"===u.postfix&&u.value>=s||"x"===u.postfix&&u.value>=r){o=u;break}}!o&&i.length&&(o=i[i.length-1]),o&&(t.src=o.url,t.width&&t.height&&"w"==o.postfix&&(t.height=t.width/t.height*o.value,t.width=o.value))}t.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null,a.setBigImage(t)}).one("load",function(){a.afterLoad(t),a.setBigImage(t)}).addClass("fancybox-image").appendTo(t.$content).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):a.setBigImage(t)},setBigImage:function(e){var t=this,o=n("<img />");e.$image=o.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&o.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),o[0].complete?o.trigger("load"):o[0].error?o.trigger("error"):e.timouts=setTimeout(function(){o[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(e){var t,i=this,r=e.opts.iframe,s=e.$slide
;e.$content=n('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(s),t=n(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(e.$content),r.preload?(i.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),i.afterLoad(e)}),s.on("refresh.fb",function(){var n,i,s,a,c,l=e.$content;if(1===t[0].isReady){try{n=t.contents(),i=n.find("body")}catch(e){}i&&i.length&&(r.css.width===o||r.css.height===o)&&(s=t[0].contentWindow.document.documentElement.scrollWidth,a=Math.ceil(i.outerWidth(!0)+(l.width()-s)),c=Math.ceil(i.outerHeight(!0)),l.css({width:r.css.width===o?a+(l.outerWidth()-l.innerWidth()):r.css.width,height:r.css.height===o?c+(l.outerHeight()-l.innerHeight()):r.css.height})),l.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),!0===e.opts.smallBtn&&e.$content.prepend(i.translate(e,e.opts.btnTpl.smallBtn)),s.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){var o=this;o.isClosing||(o.hideLoading(e),e.$slide.empty(),l(t)&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&(t=n("<div>").append(n.trim(t)).contents(),3===t[0].nodeType&&(t=n("<div>").html(t))),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=n(o.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content.filter("div").first())),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){var t=this;(e=e||t.current)&&!e.$spinner&&(e.$spinner=n(t.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){var t=this;(e=e||t.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.revealContent(e))},revealContent:function(e){var t,i,r,s,a,c=this,l=e.$slide,u=!1;return t=e.opts[c.firstRun?"animationEffect":"transitionEffect"],r=e.opts[c.firstRun?"animationDuration":"transitionDuration"],r=parseInt(e.forcedDuration===o?r:e.forcedDuration,10),!e.isMoved&&e.pos===c.currPos&&r||(t=!1),"zoom"!==t||e.pos===c.currPos&&r&&"image"===e.type&&!e.hasError&&(u=c.getThumbPos(e))||(t="fade"),"zoom"===t?(a=c.getFitPos(e),a.scaleX=a.width/u.width,a.scaleY=a.height/u.height,delete a.width,delete a.height,s=e.opts.zoomOpacity,"auto"==s&&(s=Math.abs(e.width/e.height-u.width/u.height)>.1),s&&(u.opacity=.1,a.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),u),d(e.$content),void n.fancybox.animate(e.$content,a,r,function(){c.complete()})):(c.updateSlide(e),t?(n.fancybox.stop(l),i="fancybox-animated fancybox-slide--"+(e.pos>c.prevPos?"next":"previous")+" fancybox-fx-"+t,l.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),e.$content.removeClass("fancybox-is-hidden"),d(l),void n.fancybox.animate(l,"fancybox-slide--current",r,function(t){l.removeClass(i).removeAttr("style"),e.pos===c.currPos&&c.complete()},!0)):(d(l),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===c.currPos&&c.complete())))},getThumbPos:function(o){var i,r=this,s=!1,a=o.opts.$thumb,c=a?a.offset():0;return c&&a[0].ownerDocument===t&&function(t){for(var o=t[0],i=o.getBoundingClientRect(),r=[];null!==o.parentElement;)"hidden"!==n(o.parentElement).css("overflow")&&"auto"!==n(o.parentElement).css("overflow")||r.push(o.parentElement.getBoundingClientRect()),o=o.parentElement;return r.every(function(e){var t=Math.min(i.right,e.right)-Math.max(i.left,e.left),n=Math.min(i.bottom,e.bottom)-Math.max(i.top,e.top);return t>0&&n>0})&&i.bottom>0&&i.right>0&&i.left<n(e).width()&&i.top<n(e).height()}(a)&&(i=r.$refs.stage.offset(),s={top:c.top-i.top+parseFloat(a.css("border-top-width")||0),left:c.left-i.left+parseFloat(a.css("border-left-width")||0),width:a.width(),height:a.height(),scaleX:1,scaleY:1}),s},complete:function(){var e=this,o=e.current,i={};o.isMoved||!o.isLoaded||o.isComplete||(o.isComplete=!0,o.$slide.siblings().trigger("onReset"),d(o.$slide),o.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,o){o.pos>=e.currPos-1&&o.pos<=e.currPos+1?i[o.pos]=o:o&&(n.fancybox.stop(o.$slide),o.$slide.unbind().remove())}),e.slides=i,e.updateCursor(),e.trigger("afterShow"),(n(t.activeElement).is("[disabled]")||o.opts.autoFocus&&"image"!=o.type&&"iframe"!==o.type)&&e.focus())},preload:function(){var e,t,n=this;n.group.length<2||(e=n.slides[n.currPos+1],t=n.slides[n.currPos-1],e&&"image"===e.type&&n.loadSlide(e),t&&"image"===t.type&&n.loadSlide(t))},focus:function(){var e,t=this.current;this.isClosing||(e=t&&t.isComplete?t.$slide.find("button,:input,[tabindex],a").filter(":not([disabled]):visible:first"):null,e=e&&e.length?e:this.$refs.container,e.focus())},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.uid!==e.uid&&!t.isClosing&&t.trigger("onDeactivate")}),e.current&&(e.$refs.container.index()>0&&e.$refs.container.prependTo(t.body),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var o,i,r,s,a,c,l=this,d=l.current,p=function(){l.cleanUp(e)};return!(l.isClosing||(l.isClosing=!0,!1===l.trigger("beforeClose",e)?(l.isClosing=!1,u(function(){l.update()}),1):(l.removeEvents(),d.timouts&&clearTimeout(d.timouts),r=d.$content,o=d.opts.animationEffect,i=n.isNumeric(t)?t:o?d.opts.animationDuration:0,d.$slide.off(f).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),d.$slide.siblings().trigger("onReset").remove(),i&&l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),l.hideLoading(d),l.hideControls(),l.updateCursor(),"zoom"!==o||!0!==e&&r&&i&&"image"===d.type&&!d.hasError&&(c=l.getThumbPos(d))||(o="fade"),"zoom"===o?(n.fancybox.stop(r),a=n.fancybox.getTranslate(r),a.width=a.width*a.scaleX,a.height=a.height*a.scaleY,s=d.opts.zoomOpacity,"auto"==s&&(s=Math.abs(d.width/d.height-c.width/c.height)>.1),s&&(c.opacity=0),a.scaleX=a.width/c.width,a.scaleY=a.height/c.height,a.width=c.width,a.height=c.height,n.fancybox.setTranslate(d.$content,a),n.fancybox.animate(d.$content,c,i,p),0):(o&&i?!0===e?setTimeout(p,i):n.fancybox.animate(d.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+o,i,p):p(),0))))},cleanUp:function(e){var t,o=this;o.current.$slide.trigger("onReset"),o.$refs.container.empty().remove(),o.trigger("afterClose",e),o.$lastFocus&&o.current.opts.backFocus&&o.$lastFocus.focus(),o.current=null,t=n.fancybox.getInstance(),t?t.activate():(s.scrollTop(o.scrollTop).scrollLeft(o.scrollLeft),n("html").removeClass("fancybox-enabled"),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var o,i=Array.prototype.slice.call(arguments,1),r=this,s=t&&t.opts?t:r.current;return s?i.unshift(s):s=r,i.unshift(r),n.isFunction(s.opts[e])&&(o=s.opts[e].apply(s,i)),!1===o?o:void("afterClose"===e?a.trigger(e+".fb",i):r.$refs.container.trigger(e+".fb",i))},updateControls:function(e){var t=this,o=t.current,i=o.index,r=o.opts,s=r.caption,a=t.$refs.caption;o.$slide.trigger("refresh"),t.$caption=s&&s.length?a.html(s):null,t.isHiddenControls||t.showControls(),n("[data-fancybox-count]").html(t.group.length),n("[data-fancybox-index]").html(i+1),n("[data-fancybox-prev]").prop("disabled",!r.loop&&i<=0),n("[data-fancybox-next]").prop("disabled",!r.loop&&i>=t.group.length-1)},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.isHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&e.group.length>1)).toggleClass("fancybox-show-nav",!!(t.arrows&&e.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal),e.$caption?n.addClass("fancybox-show-caption "):n.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.1.25",defaults:r,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):first').data("FancyBox"),o=Array.prototype.slice.call(arguments,1);return t instanceof p&&("string"===n.type(e)?t[e].apply(t,o):"function"===n.type(e)&&e.apply(t,o),t)},open:function(e,t,n){return new p(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),a.off("click.fb-start")},isMobile:t.createTouch!==o&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;if(!e||!e.length)return!1;if(t=e.eq(0).css("transform"),t&&-1!==t.indexOf("matrix")?(t=t.split("(")[1],t=t.split(")")[0],t=t.split(",")):t=[],t.length)t=t.length>10?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]],t=t.map(parseFloat);else{t=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i,o=n.exec(e.eq(0).attr("style"));o&&(t[0]=parseFloat(o[2]),t[1]=parseFloat(o[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var n="",i={};if(e&&t)return t.left===o&&t.top===o||(n=(t.left===o?e.position().left:t.left)+"px, "+(t.top===o?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==o&&t.scaleY!==o&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(i.transform=n),t.opacity!==o&&(i.opacity=t.opacity),t.width!==o&&(i.width=t.width),t.height!==o&&(i.height=t.height),e.css(i)},animate:function(e,t,i,r,s){var a=f||"transitionend";n.isFunction(i)&&(r=i,i=null),n.isPlainObject(t)||e.removeAttr("style"),e.on(a,function(i){(!i||!i.originalEvent||e.is(i.originalEvent.target)&&"z-index"!=i.originalEvent.propertyName)&&(e.off(a),n.isPlainObject(t)?t.scaleX!==o&&t.scaleY!==o&&(e.css("transition-duration","0ms"),t.width=Math.round(e.width()*t.scaleX),t.height=Math.round(e.height()*t.scaleY),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(e,t)):!0!==s&&e.removeClass(t),n.isFunction(r)&&r(i))}),n.isNumeric(i)&&e.css("transition-duration",i+"ms"),n.isPlainObject(t)?n.fancybox.setTranslate(e,t):e.addClass(t),e.data("timer",setTimeout(function(){e.trigger("transitionend")},i+16))},stop:function(e){clearTimeout(e.data("timer")),e.off(f)}},n.fn.fancybox=function(e){var t;return e=e||{},t=e.selector||!1,t?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},i):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},i),this},a.on("click.fb-start","[data-fancybox]",i)}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,o){if(t)return o=o||"","object"===e.type(o)&&(o=e.param(o,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),o.length&&(t+=(t.indexOf("?")>0?"&":"?")+o),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("onInit.fb",function(o,i){e.each(i.group,function(o,i){var r,s,a,c,l,u,f,d=i.src||"",p=!1;i.type||(r=e.extend(!0,{},n,i.opts.media),e.each(r,function(n,o){if(a=d.match(o.matcher),u={},f=n,a){if(p=o.type,o.paramPlace&&a[o.paramPlace]){l=a[o.paramPlace],"?"==l[0]&&(l=l.substring(1)),l=l.split("&");for(var r=0;r<l.length;++r){var h=l[r].split("=",2);2==h.length&&(u[h[0]]=decodeURIComponent(h[1].replace(/\+/g," ")))}}return c=e.extend(!0,{},o.params,i.opts[n],u),d="function"===e.type(o.url)?o.url.call(this,a,c,i):t(o.url,a,c),s="function"===e.type(o.thumb)?o.thumb.call(this,a,c,i):t(o.thumb,a),"vimeo"===f&&(d=d.replace("&%23","#")),!1}}),p?(i.src=d,i.type=p,i.opts.thumb||i.opts.$thumb&&i.opts.$thumb.length||(i.opts.thumb=s),"iframe"===p&&(e.extend(!0,i.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),i.contentProvider=f,i.opts.slideClass+=" fancybox-slide--"+("gmap_place"==f||"gmap_search"==f?"map":"video"))):i.type="image")})})}(window.jQuery),function(e,t,n){"use strict";var o=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),i=function(){return e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)}}(),r=function(t){var n=[];t=t.originalEvent||t||e.e,t=t.touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var o in t)t[o].pageX?n.push({x:t[o].pageX,y:t[o].pageY}):t[o].clientX&&n.push({x:t[o].clientX,y:t[o].clientY});return n},s=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},a=function(e){if(e.is("a,button,input,select,textarea")||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,o=e[0].attributes,i=o.length;t<i;t++)if("data-fancybox-"===o[t].nodeName.substr(0,14))return!0;return!1},c=function(t){var n=e.getComputedStyle(t)["overflow-y"],o=e.getComputedStyle(t)["overflow-x"],i=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===o||"auto"===o)&&t.scrollWidth>t.clientWidth;return i||r},l=function(e){for(var t=!1;!(t=c(e.get(0)))&&(e=e.parent(),e.length&&!e.hasClass("fancybox-stage")&&!e.is("body")););return t},u=function(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(t,"ontouchstart"))};u.prototype.destroy=function(){this.$container.off(".fb.touch")},u.prototype.ontouchstart=function(o){var i=this,c=n(o.target),u=i.instance,f=u.current,d=f.$content,p="touchstart"==o.type;if(p&&i.$container.off("mousedown.fb.touch"),!f||i.instance.isAnimating||i.instance.isClosing)return o.stopPropagation(),void o.preventDefault();if((!o.originalEvent||2!=o.originalEvent.button)&&c.length&&!a(c)&&!a(c.parent())&&!(o.originalEvent.clientX>c[0].clientWidth+c.offset().left)&&(i.startPoints=r(o),i.startPoints&&!(i.startPoints.length>1&&u.isSliding))){if(i.$target=c,i.$content=d,i.canTap=!0,n(t).off(".fb.touch"),n(t).on(p?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(i,"ontouchend")),n(t).on(p?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(i,"ontouchmove")),!u.current.opts.touch&&!u.canPan()||!c.is(i.$stage)&&!i.$stage.find(c).length)return void(c.is("img")&&o.preventDefault());o.stopPropagation(),n.fancybox.isMobile&&(l(i.$target)||l(i.$target.parent()))||o.preventDefault(),i.canvasWidth=Math.round(f.$slide[0].clientWidth),i.canvasHeight=Math.round(f.$slide[0].clientHeight),i.startTime=(new Date).getTime(),i.distanceX=i.distanceY=i.distance=0,i.isPanning=!1,i.isSwiping=!1,i.isZooming=!1,i.sliderStartPos=i.sliderLastPos||{top:0,left:0},i.contentStartPos=n.fancybox.getTranslate(i.$content),i.contentLastPos=null,1!==i.startPoints.length||i.isZooming||(i.canTap=!u.isSliding,"image"===f.type&&(i.contentStartPos.width>i.canvasWidth+1||i.contentStartPos.height>i.canvasHeight+1)?(n.fancybox.stop(i.$content),i.$content.css("transition-duration","0ms"),i.isPanning=!0):i.isSwiping=!0,i.$container.addClass("fancybox-controls--isGrabbing")),2!==i.startPoints.length||u.isAnimating||f.hasError||"image"!==f.type||!f.isLoaded&&!f.$ghost||(i.isZooming=!0,i.isSwiping=!1,i.isPanning=!1,n.fancybox.stop(i.$content),i.$content.css("transition-duration","0ms"),i.centerPointStartX=.5*(i.startPoints[0].x+i.startPoints[1].x)-n(e).scrollLeft(),i.centerPointStartY=.5*(i.startPoints[0].y+i.startPoints[1].y)-n(e).scrollTop(),i.percentageOfImageAtPinchPointX=(i.centerPointStartX-i.contentStartPos.left)/i.contentStartPos.width,i.percentageOfImageAtPinchPointY=(i.centerPointStartY-i.contentStartPos.top)/i.contentStartPos.height,i.startDistanceBetweenFingers=s(i.startPoints[0],i.startPoints[1]))}},u.prototype.ontouchmove=function(e){var t=this;if(t.newPoints=r(e),n.fancybox.isMobile&&(l(t.$target)||l(t.$target.parent())))return e.stopPropagation(),void(t.canTap=!1);if((t.instance.current.opts.touch||t.instance.canPan())&&t.newPoints&&t.newPoints.length&&(t.distanceX=s(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=s(t.newPoints[0],t.startPoints[0],"y"),t.distance=s(t.newPoints[0],t.startPoints[0]),t.distance>0)){if(!t.$target.is(t.$stage)&&!t.$stage.find(t.$target).length)return;e.stopPropagation(),e.preventDefault(),t.isSwiping?t.onSwipe():t.isPanning?t.onPan():t.isZooming&&t.onZoom()}},u.prototype.onSwipe=function(){var t,r=this,s=r.isSwiping,a=r.sliderStartPos.left||0;!0===s?Math.abs(r.distance)>10&&(r.canTap=!1,r.instance.group.length<2&&r.instance.opts.touch.vertical?r.isSwiping="y":r.instance.isSliding||!1===r.instance.opts.touch.vertical||"auto"===r.instance.opts.touch.vertical&&n(e).width()>800?r.isSwiping="x":(t=Math.abs(180*Math.atan2(r.distanceY,r.distanceX)/Math.PI),r.isSwiping=t>45&&t<135?"y":"x"),r.instance.isSliding=r.isSwiping,r.startPoints=r.newPoints,n.each(r.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration","0ms"),t.inTransition=!1,t.pos===r.instance.current.pos&&(r.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left)}),r.instance.SlideShow&&r.instance.SlideShow.isActive&&r.instance.SlideShow.stop()):("x"==s&&(r.distanceX>0&&(r.instance.group.length<2||0===r.instance.current.index&&!r.instance.current.opts.loop)?a+=Math.pow(r.distanceX,.8):r.distanceX<0&&(r.instance.group.length<2||r.instance.current.index===r.instance.group.length-1&&!r.instance.current.opts.loop)?a-=Math.pow(-r.distanceX,.8):a+=r.distanceX),r.sliderLastPos={top:"x"==s?0:r.sliderStartPos.top+r.distanceY,left:a},r.requestId&&(i(r.requestId),r.requestId=null),r.requestId=o(function(){r.sliderLastPos&&(n.each(r.instance.slides,function(e,t){var o=t.pos-r.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:r.sliderLastPos.top,left:r.sliderLastPos.left+o*r.canvasWidth+o*t.opts.gutter})}),r.$container.addClass("fancybox-is-sliding"))}))},u.prototype.onPan=function(){var e,t,r,s=this;s.canTap=!1,e=s.contentStartPos.width>s.canvasWidth?s.contentStartPos.left+s.distanceX:s.contentStartPos.left,t=s.contentStartPos.top+s.distanceY,r=s.limitMovement(e,t,s.contentStartPos.width,s.contentStartPos.height),r.scaleX=s.contentStartPos.scaleX,r.scaleY=s.contentStartPos.scaleY,s.contentLastPos=r,s.requestId&&(i(s.requestId),s.requestId=null),s.requestId=o(function(){n.fancybox.setTranslate(s.$content,s.contentLastPos)})},u.prototype.limitMovement=function(e,t,n,o){var i,r,s,a,c=this,l=c.canvasWidth,u=c.canvasHeight,f=c.contentStartPos.left,d=c.contentStartPos.top,p=c.distanceX,h=c.distanceY;return i=Math.max(0,.5*l-.5*n),r=Math.max(0,.5*u-.5*o),s=Math.min(l-n,.5*l-.5*n),a=Math.min(u-o,.5*u-.5*o),n>l&&(p>0&&e>i&&(e=i-1+Math.pow(-i+f+p,.8)||0),p<0&&e<s&&(e=s+1-Math.pow(s-f-p,.8)||0)),o>u&&(h>0&&t>r&&(t=r-1+Math.pow(-r+d+h,.8)||0),h<0&&t<a&&(t=a+1-Math.pow(a-d-h,.8)||0)),{top:t,left:e}},u.prototype.limitPosition=function(e,t,n,o){var i=this,r=i.canvasWidth,s=i.canvasHeight;return n>r?(e=e>0?0:e,e=e<r-n?r-n:e):e=Math.max(0,r/2-n/2),o>s?(t=t>0?0:t,t=t<s-o?s-o:t):t=Math.max(0,s/2-o/2),{top:t,left:e}},u.prototype.onZoom=function(){var t=this,r=t.contentStartPos.width,a=t.contentStartPos.height,c=t.contentStartPos.left,l=t.contentStartPos.top,u=s(t.newPoints[0],t.newPoints[1]),f=u/t.startDistanceBetweenFingers,d=Math.floor(r*f),p=Math.floor(a*f),h=(r-d)*t.percentageOfImageAtPinchPointX,g=(a-p)*t.percentageOfImageAtPinchPointY,m=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),y=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),v=m-t.centerPointStartX,b=y-t.centerPointStartY,x=c+(h+v),w=l+(g+b),T={top:w,left:x,scaleX:t.contentStartPos.scaleX*f,scaleY:t.contentStartPos.scaleY*f};t.canTap=!1,t.newWidth=d,t.newHeight=p,t.contentLastPos=T,t.requestId&&(i(t.requestId),t.requestId=null),t.requestId=o(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},u.prototype.ontouchend=function(e){var o=this,s=Math.max((new Date).getTime()-o.startTime,1),a=o.isSwiping,c=o.isPanning,l=o.isZooming;return o.endPoints=r(e),o.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),o.requestId&&(i(o.requestId),o.requestId=null),o.isSwiping=!1,o.isPanning=!1,o.isZooming=!1,o.canTap?o.onTap(e):(o.speed=366,o.velocityX=o.distanceX/s*.5,o.velocityY=o.distanceY/s*.5,o.speedX=Math.max(.5*o.speed,Math.min(1.5*o.speed,1/Math.abs(o.velocityX)*o.speed)),void(c?o.endPanning():l?o.endZooming():o.endSwiping(a)))},u.prototype.endSwiping=function(e){var t=this,o=!1;t.instance.isSliding=!1,t.sliderLastPos=null,"y"==e&&Math.abs(t.distanceY)>50?(n.fancybox.animate(t.instance.current.$slide,{top:t.sliderStartPos.top+t.distanceY+150*t.velocityY,opacity:0},150),o=t.instance.close(!0,300)):"x"==e&&t.distanceX>50&&t.instance.group.length>1?o=t.instance.previous(t.speedX):"x"==e&&t.distanceX<-50&&t.instance.group.length>1&&(o=t.instance.next(t.speedX)),!1!==o||"x"!=e&&"y"!=e||t.instance.jumpTo(t.instance.current.index,150),t.$container.removeClass("fancybox-is-sliding")},u.prototype.endPanning=function(){var e,t,o,i=this;i.contentLastPos&&(!1===i.instance.current.opts.touch.momentum?(e=i.contentLastPos.left,t=i.contentLastPos.top):(e=i.contentLastPos.left+i.velocityX*i.speed,t=i.contentLastPos.top+i.velocityY*i.speed),o=i.limitPosition(e,t,i.contentStartPos.width,i.contentStartPos.height),o.width=i.contentStartPos.width,o.height=i.contentStartPos.height,n.fancybox.animate(i.$content,o,330))},u.prototype.endZooming=function(){var e,t,o,i,r=this,s=r.instance.current,a=r.newWidth,c=r.newHeight;r.contentLastPos&&(e=r.contentLastPos.left,t=r.contentLastPos.top,i={top:t,left:e,width:a,height:c,scaleX:1,scaleY:1},n.fancybox.setTranslate(r.$content,i),a<r.canvasWidth&&c<r.canvasHeight?r.instance.scaleToFit(150):a>s.width||c>s.height?r.instance.scaleToActual(r.centerPointStartX,r.centerPointStartY,150):(o=r.limitPosition(e,t,a,c),n.fancybox.setTranslate(r.content,n.fancybox.getTranslate(r.$content)),n.fancybox.animate(r.$content,o,150)))},u.prototype.onTap=function(e){var t,o=this,i=n(e.target),s=o.instance,a=s.current,c=e&&r(e)||o.startPoints,l=c[0]?c[0].x-o.$stage.offset().left:0,u=c[0]?c[0].y-o.$stage.offset().top:0,f=function(t){var i=a.opts[t];if(n.isFunction(i)&&(i=i.apply(s,[a,e])),i)switch(i){case"close":s.close(o.startEvent);break;case"toggleControls":s.toggleControls(!0);break;case"next":s.next();break;case"nextOrClose":s.group.length>1?s.next():s.close(o.startEvent);break;case"zoom":"image"==a.type&&(a.isLoaded||a.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,u):s.group.length<2&&s.close(o.startEvent))}};if(!(e.originalEvent&&2==e.originalEvent.button||s.isSliding||l>i[0].clientWidth+i.offset().left)){if(i.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(i.is(".fancybox-slide"))t="Slide";else{if(!s.current.$content||!s.current.$content.has(e.target).length)return;t="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,Math.abs(l-o.tapX)>50||Math.abs(u-o.tapY)>50||s.isSliding)return this;f("dblclick"+t)}else o.tapX=l,o.tapY=u,a.opts["dblclick"+t]&&a.opts["dblclick"+t]!==a.opts["click"+t]?o.tapped=setTimeout(function(){o.tapped=null,f("click"+t)},300):f("click"+t);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new u(t))}),n(t).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(){var e=this;e.instance&&e.instance.current&&(e.instance.current.opts.loop||e.instance.currIndex<e.instance.group.length-1)?e.timer=setTimeout(function(){e.instance.next()},e.instance.current.opts.slideShow.speed||e.speed):(e.stop(),e.instance.idleSecondsCounter=0,e.instance.showControls())},clear:function(){var e=this;clearTimeout(e.timer),e.timer=null},start:function(){var e=this,t=e.instance.current;e.instance&&t&&(t.opts.loop||t.index<e.instance.group.length-1)&&(e.isActive=!0,e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_STOP).addClass("fancybox-button--pause"),t.isComplete&&e.set())},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_START).removeClass("fancybox-button--pause"),e.isActive=!1},toggle:function(){var e=this;e.isActive?e.stop():e.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,o){var i=t&&t.SlideShow;o?i&&n.opts.slideShow.autoStart&&i.start():i&&i.isActive&&i.clear()},"afterShow.fb":function(e,t,n){var o=t&&t.SlideShow;o&&o.isActive&&o.set()},"afterKeydown.fb":function(n,o,i,r,s){var a=o&&o.SlideShow;!a||!i.opts.slideShow||80!==s&&32!==s||t(e.activeElement).is("button,a,input")||(r.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),o=n&&n.SlideShow;o&&o.isActive&&(e.hidden?o.clear():o.set())})}(document,window.jQuery),function(e,t){"use strict";var n=function(){var t,n,o,i=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r={};for(n=0;n<i.length;n++)if((t=i[n])&&t[1]in e){for(o=0;o<t.length;o++)r[i[0][o]]=t[o];return r}return!1}();if(!n)return void(t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1));var o={request:function(t){t=t||e.documentElement,t[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t(e).on({"onInit.fb":function(e,t){var n,i=t.$refs.toolbar.find("[data-fancybox-fullscreen]");t&&!t.FullScreen&&t.group[t.currIndex].opts.fullScreen?(n=t.$refs.container,n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),o.toggle(n[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&o.request(n[0]),t.FullScreen=o):i.hide()},"afterKeydown.fb":function(e,t,n,o,i){t&&t.FullScreen&&70===i&&(o.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&o.exit()}}),t(e).on(n.fullscreenchange,function(){var e=t.fancybox.getInstance();e.current&&"image"===e.current.type&&e.isAnimating&&(e.current.$content.css("transition","none"),e.isAnimating=!1,e.update(!0,!0,0)),e.trigger("onFullscreenChange",o.isFullscreen())})}(document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var e=this,t=e.instance.group[0],n=e.instance.group[1];e.$button=e.instance.$refs.toolbar.find("[data-fancybox-thumbs]"),e.instance.group.length>1&&e.instance.group[e.instance.currIndex].opts.thumbs&&("image"==t.type||t.opts.thumb||t.opts.$thumb)&&("image"==n.type||n.opts.thumb||n.opts.$thumb)?(e.$button.on("click",function(){e.toggle()}),e.isActive=!0):(e.$button.hide(),e.isActive=!1)},create:function(){var e,n,o=this.instance;this.$grid=t('<div class="fancybox-thumbs"></div>').appendTo(o.$refs.container),e="<ul>",t.each(o.group,function(t,o){n=o.opts.thumb||(o.opts.$thumb?o.opts.$thumb.attr("src"):null),n||"image"!==o.type||(n=o.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",this.$list=t(e).appendTo(this.$grid).on("click","li",function(){o.jumpTo(t(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var e,n,o,i,r=t(this).parent().removeClass("fancybox-thumbs-loading"),s=r.outerWidth(),a=r.outerHeight();e=this.naturalWidth||this.width,n=this.naturalHeight||this.height,o=e/s,i=n/a,o>=1&&i>=1&&(o>i?(e/=i,n=a):(e=s,n/=o)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":Math.min(0,Math.floor(.3*a-.3*n)),"margin-left":Math.min(0,Math.floor(.5*s-.5*e))}).show()}).each(function(){this.src=t(this).data("src")})},focus:function(){this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),
this.focus()):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.Thumbs&&(t.Thumbs=new n(t))},"beforeShow.fb":function(e,t,n,o){var i=t&&t.Thumbs;if(i&&i.isActive){if(n.modal)return i.$button.hide(),void i.hide();o&&!0===t.opts.thumbs.autoStart&&i.show(),i.isVisible&&i.focus()}},"afterKeydown.fb":function(e,t,n,o,i){var r=t&&t.Thumbs;r&&r.isActive&&71===i&&(o.preventDefault(),r.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==t.opts.thumbs.hideOnClose&&n.close()}})}(document,window.jQuery),function(e,t,n){"use strict";function o(){var e=t.location.hash.substr(1),n=e.split("-"),o=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,i=n.join("-");return o<1&&(o=1),{hash:e,index:o,gallery:i}}function i(e){var t;""!==e.gallery&&(t=n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1),t.length||(t=n("#"+n.escapeSelector(e.gallery))),t.length&&(s=!1,t.trigger("click")))}function r(e){var t;return!!e&&(t=e.current?e.current.opts:e.opts,t.hash||(t.$orig?t.$orig.data("fancybox"):""))}n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var s=!0,a=null,c=null;n(function(){setTimeout(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,i;!1!==t.group[t.currIndex].opts.hash&&(n=o(),(i=r(t))&&n.gallery&&i==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,o,i){var l;i&&!1!==i.opts.hash&&(l=r(o))&&""!==l&&(t.location.hash.indexOf(l)<0&&(o.opts.origHash=t.location.hash),a=l+(o.group.length>1?"-"+(i.index+1):""),"replaceState"in t.history?(c&&clearTimeout(c),c=setTimeout(function(){t.history[s?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+a),c=null,s=!1},300)):t.location.hash=a)},"beforeClose.fb":function(o,i,s){var l,u;c&&clearTimeout(c),!1!==s.opts.hash&&(l=r(i),u=i&&i.opts.origHash?i.opts.origHash:"",l&&""!==l&&("replaceState"in history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+u):(t.location.hash=u,n(t).scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))),a=null)}}),n(t).on("hashchange.fb",function(){var e=o();n.fancybox.getInstance()?!a||a===e.gallery+"-"+e.index||1===e.index&&a==e.gallery||(a=null,n.fancybox.close()):""!==e.gallery&&i(e)}),i(o()))},50)})}(document,window,window.jQuery),$(function(){if(new Headhesive(".navbar",{offset:"#js-stick-navbar-point",classes:{clone:"navbar_sticky",stick:"-stick",unstick:"-unstick"}}),0==!$(".js-page-content").length&&$(".js-page-content").prepend($(".navbar_sticky")),$(".js-mask-phone").mask("+7 (999) 999-99-99"),$(".js-callback-form-submit").length){var e=$(".js-callback-form"),t=$(".js-callback-modal"),n=$(".js-callback-form-submit"),o=$(".js-callback-order-btn"),i=$(".js-modal-success"),r=function(e){var t=e.find("#callback-phone");return!(t.val().length<1&&(t.parent().addClass("has-error"),t.one("focus",function(){t.parent().removeClass("has-error")}),1))};e.submit(function(e){e.preventDefault(),s()}),n.click(function(e){e.preventDefault(),s()});var s=function(){if(r(e)){n.attr("disabled",!0),e.find("input").attr("disabled",!0),e.find("select").attr("disabled",!0);var s="Перезвоните мне. Удобное время звонка : "+e.find("#callback-time").val()+'. Заявка от клиента по акции "Друзья ГАРДИУМА"',a={direction:kis_dir,name:e.find("#callback-name").val(),phone:e.find("#callback-phone").val(),comment:s},c=SubmitSender2Mail2CT(a);$.post("../ajax/",{action:"callback",name:e.find("#callback-name").val(),phone:e.find("#callback-phone").val(),time:e.find("#callback-time").val(),json:"=jdbo="+$.toJSON(c)+" =jdbc="}).done(function(e){try{ga("send","event","Callback","submit")}catch(e){}t.modal("hide"),t.remove(),o.remove(),i.modal("show")})}}}if($(".js-subscribe-form-submit").length){var a=$(".js-subscribe-form"),c=$(".js-subscribe-form-submit"),l=$(".js-modal-subscribe-success"),u=$(".subscribe"),f=function(e){var t=e.find("#subscribe-email");return!!isEmail(t.val())||(t.addClass("has-error"),t.one("focus",function(){t.removeClass("has-error")}),!1)};a.submit(function(e){e.preventDefault(),d()}),c.click(function(e){e.preventDefault(),d()});var d=function(){f(a)&&(c.attr("disabled",!0),a.find("#subscribe-email").attr("disabled",!0),$.post("../ajax/",{action:"subscribe",email:a.find("#subscribe-email").val()}).done(function(e){l.modal("show"),a.remove(),u.find(".subscribe__text").remove(),u.find(".subscribe__title").text("Будем держать вас в курсе")}))}}}),$(function(){$(".js-checkbox-all").on("change",function(){$(".js-checkbox").prop("checked",this.checked)}),$(".js-checkbox").on("change",function(){var e=0==$(".js-checkbox:not(:checked)").length;$(".js-checkbox-all").prop("checked",e)})}),$(function(){$(".js-fancy-img").fancybox({fitToView:!1})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
